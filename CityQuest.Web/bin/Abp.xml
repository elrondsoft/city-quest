<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Abp</name>
    </assembly>
    <members>
        <member name="T:Abp.AbpConsts">
            <summary>
            Used to define some constants for ABP.
            </summary>
        </member>
        <member name="F:Abp.AbpConsts.CurrentVersion">
            <summary>
            Current version of the ABP.
            </summary>
        </member>
        <member name="F:Abp.AbpConsts.LocalizationSourceName">
            <summary>
            Localization source name of ASP.NET Boilerplate framework.
            </summary>
        </member>
        <member name="T:Abp.AbpServiceBase">
            <summary>
            This class can be used as a base class for services.
            It has some useful objects property-injected and has some basic methods
            most of services may need to.
            </summary>
        </member>
        <member name="M:Abp.AbpServiceBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.AbpServiceBase.L(System.String)">
            <summary>
            Gets localized string for given key name and current language.
            </summary>
            <param name="name">Key name</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.AbpServiceBase.L(System.String,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.AbpServiceBase.L(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets localized string for given key name and specified culture information.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.AbpServiceBase.L(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="P:Abp.AbpServiceBase.SettingManager">
            <summary>
            Reference to the setting manager.
            </summary>
        </member>
        <member name="P:Abp.AbpServiceBase.UnitOfWorkManager">
            <summary>
            Reference to <see cref="T:Abp.Domain.Uow.IUnitOfWorkManager"/>.
            </summary>
        </member>
        <member name="P:Abp.AbpServiceBase.CurrentUnitOfWork">
            <summary>
            Gets current unit of work.
            </summary>
        </member>
        <member name="P:Abp.AbpServiceBase.LocalizationManager">
            <summary>
            Reference to the localization manager.
            </summary>
        </member>
        <member name="P:Abp.AbpServiceBase.LocalizationSourceName">
            <summary>
            Gets/sets name of the localization source that is used in this application service.
            It must be set in order to use <see cref="M:Abp.AbpServiceBase.L(System.String)"/> and <see cref="M:Abp.AbpServiceBase.L(System.String,System.Globalization.CultureInfo)"/> methods.
            </summary>
        </member>
        <member name="P:Abp.AbpServiceBase.LocalizationSource">
            <summary>
            Gets localization source.
            It's valid if <see cref="P:Abp.AbpServiceBase.LocalizationSourceName"/> is set.
            </summary>
        </member>
        <member name="P:Abp.AbpServiceBase.Logger">
            <summary>
            Reference to the logger to write logs.
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.HasMenuItemDefinitionsExtensions">
            <summary>
            Defines extension methods for <see cref="T:Abp.Application.Navigation.IHasMenuItemDefinitions"/>.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.HasMenuItemDefinitionsExtensions.GetItemByName(Abp.Application.Navigation.IHasMenuItemDefinitions,System.String)">
            <summary>
            Searches and gets a <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> by it's unique name.
            Throws exception if can not find.
            </summary>
            <param name="source">Source object</param>
            <param name="name">Unique name of the source</param>
        </member>
        <member name="M:Abp.Application.Navigation.HasMenuItemDefinitionsExtensions.GetItemByNameOrNull(Abp.Application.Navigation.IHasMenuItemDefinitions,System.String)">
            <summary>
            Searches all menu items (recursively) in the source and gets a <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> by it's unique name.
            Returns null if can not find.
            </summary>
            <param name="source">Source object</param>
            <param name="name">Unique name of the source</param>
        </member>
        <member name="T:Abp.Application.Navigation.IHasMenuItemDefinitions">
            <summary>
            Declares common interface for classes those have menu items.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.IHasMenuItemDefinitions.Items">
            <summary>
            List of menu items.
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.INavigationManager">
            <summary>
            Manages navigation in the application.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.INavigationManager.Menus">
            <summary>
            All menus defined in the application.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.INavigationManager.MainMenu">
            <summary>
            Gets the main menu of the application.
            A shortcut of <see cref="P:Abp.Application.Navigation.INavigationManager.Menus"/>["MainMenu"].
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.IUserNavigationManager">
            <summary>
            Used to manage navigation for users.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.IUserNavigationManager.GetMenuAsync(System.String,System.Nullable{System.Int64})">
            <summary>
            Gets a menu specialized for given user.
            </summary>
            <param name="menuName">Unique name of the menu</param>
            <param name="userId">User id or null for anonymous users</param>
        </member>
        <member name="M:Abp.Application.Navigation.IUserNavigationManager.GetMenusAsync(System.Nullable{System.Int64})">
            <summary>
            Gets all menus specialized for given user.
            </summary>
            <param name="userId">User id or null for anonymous users</param>
        </member>
        <member name="T:Abp.Application.Navigation.MenuDefinition">
            <summary>
            Represents a navigation menu for an application.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.MenuDefinition.#ctor(System.String,Abp.Localization.ILocalizableString,System.Object)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Navigation.MenuDefinition"/> object.
            </summary>
            <param name="name">Unique name of the menu</param>
            <param name="displayName">Display name of the menu</param>
            <param name="customData">Can be used to store a custom object related to this menu.</param>
        </member>
        <member name="M:Abp.Application.Navigation.MenuDefinition.AddItem(Abp.Application.Navigation.MenuItemDefinition)">
            <summary>
            Adds a <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> to <see cref="P:Abp.Application.Navigation.MenuDefinition.Items"/>.
            </summary>
            <param name="menuItem"><see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> to be added</param>
            <returns>This <see cref="T:Abp.Application.Navigation.MenuDefinition"/> object</returns>
        </member>
        <member name="P:Abp.Application.Navigation.MenuDefinition.Name">
            <summary>
            Unique name of the menu in the application. Required.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuDefinition.DisplayName">
            <summary>
            Display name of the menu. Required.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuDefinition.CustomData">
            <summary>
            Can be used to store a custom object related to this menu. Optional.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuDefinition.Items">
            <summary>
            Menu items (first level).
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.MenuItemDefinition">
            <summary>
            Represents an item in a <see cref="T:Abp.Application.Navigation.MenuDefinition"/>.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.MenuItemDefinition.#ctor(System.String,Abp.Localization.ILocalizableString,System.String,System.String,System.Boolean,System.String,System.Int32,System.Object)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.MenuItemDefinition.AddItem(Abp.Application.Navigation.MenuItemDefinition)">
            <summary>
            Adds a <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> to <see cref="P:Abp.Application.Navigation.MenuItemDefinition.Items"/>.
            </summary>
            <param name="menuItem"><see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> to be added</param>
            <returns>This <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/> object</returns>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.Name">
            <summary>
            Unique name of the menu item in the application. 
            Can be used to find this menu item later.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.DisplayName">
            <summary>
            Display name of the menu item. Required.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.Order">
            <summary>
            The Display order of the menu. Optional.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.Icon">
            <summary>
            Icon of the menu item if exists. Optional.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.Url">
            <summary>
            The URL to navigate when this menu item is selected. Optional.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.RequiredPermissionName">
            <summary>
            A permission name. Only users that has this permission can see this menu item.
            Optional.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.RequiresAuthentication">
            <summary>
            This can be set to true if only authenticated users should see this menu item.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.IsLeaf">
            <summary>
            Returns true if this menu item has no child <see cref="P:Abp.Application.Navigation.MenuItemDefinition.Items"/>.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.CustomData">
            <summary>
            Can be used to store a custom object related to this menu item. Optional.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.MenuItemDefinition.Items">
            <summary>
            Sub items of this menu item. Optional.
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.MenuItemDefinitionExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/>.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemToTop(System.Collections.Generic.IList{Abp.Application.Navigation.MenuItemDefinition},System.String)">
            <summary>
            Moves a menu item to top in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
        </member>
        <member name="M:Abp.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemToBottom(System.Collections.Generic.IList{Abp.Application.Navigation.MenuItemDefinition},System.String)">
            <summary>
            Moves a menu item to bottom in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
        </member>
        <member name="M:Abp.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemBefore(System.Collections.Generic.IList{Abp.Application.Navigation.MenuItemDefinition},System.String,System.String)">
            <summary>
            Moves a menu item in the list after another menu item in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
            <param name="targetMenuItemName">Target menu item (to move before it)</param>
        </member>
        <member name="M:Abp.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemAfter(System.Collections.Generic.IList{Abp.Application.Navigation.MenuItemDefinition},System.String,System.String)">
            <summary>
            Moves a menu item in the list before another menu item in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
            <param name="targetMenuItemName">Target menu item (to move after it)</param>
        </member>
        <member name="T:Abp.Dependency.ITransientDependency">
            <summary>
            All classes implement this interface are automatically registered to dependency injection as transient object.
            </summary>
        </member>
        <member name="T:Abp.Dependency.ISingletonDependency">
            <summary>
            All classes implement this interface are automatically registered to dependency injection as singleton object.
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.INavigationProviderContext">
            <summary>
            Provides infrastructure to set navigation.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.INavigationProviderContext.Manager">
            <summary>
            Gets a reference to the menu manager.
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.UserMenu">
            <summary>
            Represents a menu shown to the user.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.UserMenu.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Navigation.UserMenu"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.UserMenu.#ctor(Abp.Application.Navigation.MenuDefinition)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Navigation.UserMenu"/> object from given <see cref="T:Abp.Application.Navigation.MenuDefinition"/>.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenu.Name">
            <summary>
            Unique name of the menu in the application. 
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenu.DisplayName">
            <summary>
            Display name of the menu.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenu.CustomData">
            <summary>
            A custom object related to this menu item.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenu.Items">
            <summary>
            Menu items (first level).
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.UserMenuItem">
            <summary>
            Represents an item in a <see cref="T:Abp.Application.Navigation.UserMenu"/>.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.UserMenuItem.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Navigation.UserMenuItem"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.UserMenuItem.#ctor(Abp.Application.Navigation.MenuItemDefinition)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Navigation.UserMenuItem"/> object from given <see cref="T:Abp.Application.Navigation.MenuItemDefinition"/>.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenuItem.Name">
            <summary>
            Unique name of the menu item in the application. 
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenuItem.Icon">
            <summary>
            Icon of the menu item if exists.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenuItem.DisplayName">
            <summary>
            Display name of the menu item.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenuItem.Order">
            <summary>
            The Display order of the menu. Optional.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenuItem.Url">
            <summary>
            The URL to navigate when this menu item is selected.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenuItem.CustomData">
            <summary>
            A custom object related to this menu item.
            </summary>
        </member>
        <member name="P:Abp.Application.Navigation.UserMenuItem.Items">
            <summary>
            Sub items of this menu item.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.ComboboxItemDto">
            <summary>
            This DTO can be used as a simple item for a combobox/list.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IDto">
            <summary>
            This interface must be implemented by all DTO classes to identify them by convention.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.ComboboxItemDto.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.ComboboxItemDto"/>.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.ComboboxItemDto.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.ComboboxItemDto"/>.
            </summary>
            <param name="value">Value of the item</param>
            <param name="displayText">Display text of the item</param>
        </member>
        <member name="P:Abp.Application.Services.Dto.ComboboxItemDto.Value">
            <summary>
            Value of the item.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.ComboboxItemDto.DisplayText">
            <summary>
            Display text of the item.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityRequestInput">
            <summary>
            This <see cref="T:Abp.Application.Services.Dto.IInputDto"/> can be used to send Id of an entity to an <see cref="T:Abp.Application.Services.IApplicationService"/> method.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityRequestInput`1">
            <summary>
            This <see cref="T:Abp.Application.Services.Dto.IInputDto"/> can be used to send Id of an entity to an <see cref="T:Abp.Application.Services.IApplicationService"/> method.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of entity</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityDto`1">
            <summary>
            Implements common properties for entity based DTOs.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.IEntityDto`1">
            <summary>
            Defines common properties for entity based DTOs.
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="P:Abp.Application.Services.Dto.IEntityDto`1.Id">
            <summary>
            Id of the entity.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityDto`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityDto`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityDto`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityDto`1"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="P:Abp.Application.Services.Dto.EntityDto`1.Id">
            <summary>
            Id of the entity.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IInputDto">
            <summary>
            This interface is used to define DTOs those are used as input parameters.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Validation.IValidate">
            <summary>
            This interface is implemented by classes those are needed to validate before use.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityRequestInput`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityRequestInput`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityRequestInput`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityRequestInput`1"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="T:Abp.Application.Services.Dto.IEntityDto">
            <summary>
            A shortcut of <see cref="T:Abp.Application.Services.Dto.IEntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityRequestInput.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityRequestInput"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityRequestInput.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityRequestInput"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityResultOutput">
            <summary>
            This <see cref="T:Abp.Application.Services.Dto.IOutputDto"/> can be used to send Id of an entity as response from an <see cref="T:Abp.Application.Services.IApplicationService"/> method.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityResultOutput`1">
            <summary>
            This <see cref="T:Abp.Application.Services.Dto.IOutputDto"/> can be used to send Id of an entity as response from an <see cref="T:Abp.Application.Services.IApplicationService"/> method.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of entity</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.IOutputDto">
            <summary>
            This interface is used to define DTOs those are used as output parameters.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityResultOutput`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityResultOutput`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityResultOutput`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityResultOutput`1"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityResultOutput.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityResultOutput"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityResultOutput.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityResultOutput"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="T:Abp.Application.Services.Dto.FullAuditedEntityDto">
            <summary>
            A shortcut of <see cref="T:Abp.Application.Services.Dto.FullAuditedEntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.FullAuditedEntityDto`1">
            <summary>
            This class can be inherited for simple Dto objects those are used for entities implement <see cref="T:Abp.Domain.Entities.Auditing.IFullAudited`1"/> interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.AuditedEntityDto`1">
            <summary>
            This class can be inherited for simple Dto objects those are used for entities implement <see cref="T:Abp.Domain.Entities.Auditing.IAudited`1"/> interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.CreationAuditedEntityDto`1">
            <summary>
            This class can be inherited for simple Dto objects those are used for entities implement <see cref="T:Abp.Domain.Entities.Auditing.ICreationAudited"/> interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.ICreationAudited">
            <summary>
            This interface is implemented by entities that is wanted to store creation information (who and when created).
            Creation time and creator user are automatically set when saving <see cref="T:Abp.Domain.Entities.Entity"/> to database.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IHasCreationTime">
            <summary>
            An entity can implement this interface if <see cref="P:Abp.Domain.Entities.Auditing.IHasCreationTime.CreationTime"/> of this entity must be stored.
            <see cref="P:Abp.Domain.Entities.Auditing.IHasCreationTime.CreationTime"/> can be automatically set when saving <see cref="T:Abp.Domain.Entities.Entity"/> to database.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.IHasCreationTime.CreationTime">
            <summary>
            Creation time of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.ICreationAudited.CreatorUserId">
            <summary>
            Id of the creator user of this entity.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.CreationAuditedEntityDto`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.CreationAuditedEntityDto`1.CreationTime">
            <summary>
            Creation date of this entity.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.CreationAuditedEntityDto`1.CreatorUserId">
            <summary>
            Creator user's id for this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IAudited">
            <summary>
            This interface is implemented by entities which must be audited.
            Related properties automatically set when saving/updating <see cref="T:Abp.Domain.Entities.Entity"/> objects.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IModificationAudited">
            <summary>
            This interface is implemented by entities that is wanted to store modification information (who and when modified lastly).
            Properties are automatically set when updating the <see cref="T:Abp.Domain.Entities.IEntity"/>.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.IModificationAudited.LastModificationTime">
            <summary>
            The last time of modification.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.IModificationAudited.LastModifierUserId">
            <summary>
            Last modifier user for this entity.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.AuditedEntityDto`1.LastModificationTime">
            <summary>
            Last modification date of this entity.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.AuditedEntityDto`1.LastModifierUserId">
            <summary>
            Last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IFullAudited">
            <summary>
            This interface ads <see cref="T:Abp.Domain.Entities.Auditing.IDeletionAudited"/> to <see cref="T:Abp.Domain.Entities.Auditing.IAudited"/> for a fully audited entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IDeletionAudited">
            <summary>
            This interface is implemented by entities which wanted to store deletion information (who and when deleted).
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.ISoftDelete">
            <summary>
            Used to standardize soft deleting entities.
            Soft-delete entities are not actually deleted,
            marked as IsDeleted = true in the database,
            but can not be retrieved to the application.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.ISoftDelete.IsDeleted">
            <summary>
            Used to mark an Entity as 'Deleted'. 
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.IDeletionAudited.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.IDeletionAudited.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.FullAuditedEntityDto`1.IsDeleted">
            <summary>
            Is this entity deleted?
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.FullAuditedEntityDto`1.DeleterUserId">
            <summary>
            Deleter user's Id, if this entity is deleted,
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.FullAuditedEntityDto`1.DeletionTime">
            <summary>
            Deletion time, if this entity is deleted,
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IdInput`1">
            <summary>
            This <see cref="T:Abp.Application.Services.Dto.IInputDto"/> can be directly used (or inherited)
            to pass an Id value to an application service method.
            </summary>
            <typeparam name="TId">Type of the Id</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.IdInput">
            <summary>
            A shortcut of <see cref="T:Abp.Application.Services.Dto.IdInput`1"/> for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IListResult`1">
            <summary>
            This interface is defined to standardize to return a list of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Abp.Application.Services.Dto.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="P:Abp.Application.Services.Dto.IListResult`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IPagedResult`1">
            <summary>
            This interface is defined to standardize to return a page of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Abp.Application.Services.Dto.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.IHasTotalCount">
            <summary>
            This interface is defined to standardize to set "Total Count of Items" to a DTO.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.IHasTotalCount.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.ListResultDto`1">
            <summary>
            Implements <see cref="T:Abp.Application.Services.Dto.IListResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Abp.Application.Services.Dto.ListResultDto`1.Items"/> list</typeparam>
        </member>
        <member name="M:Abp.Application.Services.Dto.ListResultDto`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.ListResultDto`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.ListResultDto`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.ListResultDto`1"/> object.
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="P:Abp.Application.Services.Dto.ListResultDto`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.ListResultOutput`1">
            <summary>
            This class can be used to return a list from an <see cref="T:Abp.Application.Services.IApplicationService"/> method.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Abp.Application.Services.Dto.ListResultDto`1.Items"/> list</typeparam>
        </member>
        <member name="M:Abp.Application.Services.Dto.ListResultOutput`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.ListResultOutput`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.ListResultOutput`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.ListResultOutput`1"/> object.
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="T:Abp.Auditing.IMvcControllersAuditingConfiguration">
            <summary>
            Defines MVC Controller auditing configurations
            </summary>
        </member>
        <member name="P:Abp.Auditing.IMvcControllersAuditingConfiguration.IsEnabled">
            <summary>
            Used to enable/disable auditing for MVC controllers.
            Default: true.
            </summary>
        </member>
        <member name="P:Abp.Auditing.IMvcControllersAuditingConfiguration.IsEnabledForChildActions">
            <summary>
            Used to enable/disable auditing for child MVC actions.
            Default: false.
            </summary>
        </member>
        <member name="T:Abp.Configuration.CacheManagerSettingExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Runtime.Caching.ICacheManager"/> to get setting caches.
            </summary>
        </member>
        <member name="M:Abp.Configuration.CacheManagerSettingExtensions.GetApplicationSettingsCache(Abp.Runtime.Caching.ICacheManager)">
            <summary>
            Gets application settings cache.
            </summary>
        </member>
        <member name="M:Abp.Configuration.CacheManagerSettingExtensions.GetTenantSettingsCache(Abp.Runtime.Caching.ICacheManager)">
            <summary>
            Gets tenant settings cache.
            </summary>
        </member>
        <member name="M:Abp.Configuration.CacheManagerSettingExtensions.GetUserSettingsCache(Abp.Runtime.Caching.ICacheManager)">
            <summary>
            Gets user settings cache.
            </summary>
        </member>
        <member name="T:Abp.Localization.Dictionaries.ILocalizationDictionaryProvider">
            <summary>
            Used to get localization dictionaries (<see cref="T:Abp.Localization.Dictionaries.ILocalizationDictionary"/>)
            for a <see cref="T:Abp.Localization.Dictionaries.IDictionaryBasedLocalizationSource"/>.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.CacheManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Runtime.Caching.ICacheManager"/>.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.Configuration.ICacheConfigurator">
            <summary>
            A registered cache configurator.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Caching.Configuration.ICacheConfigurator.CacheName">
            <summary>
            Name of the cache.
            It will be null if this configurator configures all caches.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Caching.Configuration.ICacheConfigurator.InitAction">
            <summary>
            Configuration action. Called just after the cache is created.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.Configuration.ICachingConfiguration">
            <summary>
            Used to configure caching system.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.Configuration.ICachingConfiguration.ConfigureAll(System.Action{Abp.Runtime.Caching.ICache})">
            <summary>
            Used to configure all caches.
            </summary>
            <param name="initAction">
            An action to configure caches
            This action is called for each cache just after created.
            </param>
        </member>
        <member name="M:Abp.Runtime.Caching.Configuration.ICachingConfiguration.Configure(System.String,System.Action{Abp.Runtime.Caching.ICache})">
            <summary>
            Used to configure a specific cache. 
            </summary>
            <param name="cacheName">Cache name</param>
            <param name="initAction">
            An action to configure the cache.
            This action is called just after the cache is created.
            </param>
        </member>
        <member name="P:Abp.Runtime.Caching.Configuration.ICachingConfiguration.Configurators">
            <summary>
            List of all registered configurators.
            </summary>
        </member>
        <member name="T:Abp.NameValue">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="M:Abp.NameValue.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.NameValue"/>.
            </summary>
        </member>
        <member name="M:Abp.NameValue.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Abp.NameValue"/>.
            </summary>
        </member>
        <member name="P:Abp.NameValue.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:Abp.NameValue.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.NameValueDto">
            <summary>
            Can be used to send/receive Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.NameValueDto.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.NameValueDto"/>.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.NameValueDto.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.NameValueDto"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.NullableIdInput`1">
            <summary>
            This <see cref="T:Abp.Application.Services.Dto.IInputDto"/> can be directly used (or inherited)
            to pass an nullable Id value to an application service method.
            </summary>
            <typeparam name="TId">Type of the Id</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.NullableIdInput">
            <summary>
            A shortcut of <see cref="T:Abp.Application.Services.Dto.NullableIdInput`1"/> for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.PagedResultDto`1">
            <summary>
            Implements <see cref="T:Abp.Application.Services.Dto.IPagedResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Abp.Application.Services.Dto.ListResultDto`1.Items"/> list</typeparam>
        </member>
        <member name="M:Abp.Application.Services.Dto.PagedResultDto`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.PagedResultDto`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.PagedResultDto`1.#ctor(System.Int32,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.PagedResultDto`1"/> object.
            </summary>
            <param name="totalCount">Total count of Items</param>
            <param name="items">List of items in current page</param>
        </member>
        <member name="P:Abp.Application.Services.Dto.PagedResultDto`1.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.PagedResultOutput`1">
            <summary>
            This class can be used to return a paged list from an <see cref="T:Abp.Application.Services.IApplicationService"/> method.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="!:PagedResultDto&lt;T&gt;.Items"/> list</typeparam>
        </member>
        <member name="M:Abp.Application.Services.Dto.PagedResultOutput`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.PagedResultOutput`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.PagedResultOutput`1.#ctor(System.Int32,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.PagedResultOutput`1"/> object.
            </summary>
            <param name="totalCount">Total count of Items</param>
            <param name="items">List of items in current page</param>
        </member>
        <member name="T:Abp.Auditing.AuditingStoreExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Auditing.IAuditingStore"/>.
            </summary>
        </member>
        <member name="M:Abp.Auditing.AuditingStoreExtensions.Save(Abp.Auditing.IAuditingStore,Abp.Auditing.AuditInfo)">
            <summary>
            Should save audits to a persistent store.
            </summary>
            <param name="auditingStore">Auditing store</param>
            <param name="auditInfo">Audit informations</param>
        </member>
        <member name="T:Abp.Authorization.Interceptors.AuthorizationInterceptorRegistrar">
            <summary>
            This class is used to register interceptors on the Application Layer.
            </summary>
        </member>
        <member name="T:Abp.Auditing.AuditedAttribute">
            <summary>
            This attribute is used to apply audit logging for a single method or
            all methods of a class or interface.
            </summary>
        </member>
        <member name="T:Abp.Auditing.AuditInfo">
            <summary>
            This informations are collected for an <see cref="T:Abp.Auditing.AuditedAttribute"/> method.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.UserId">
            <summary>
            UserId.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.ImpersonatorUserId">
            <summary>
            ImpersonatorUserId.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.ImpersonatorTenantId">
            <summary>
            ImpersonatorTenantId.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.ServiceName">
            <summary>
            Service (class/interface) name.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.MethodName">
            <summary>
            Executed method name.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.Parameters">
            <summary>
            Calling parameters.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.ExecutionTime">
            <summary>
            Start time of the method execution.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.ExecutionDuration">
            <summary>
            Total duration of the method call.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.ClientIpAddress">
            <summary>
            IP address of the client.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.ClientName">
            <summary>
            Name (generally computer name) of the client.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.BrowserInfo">
            <summary>
            Browser information if this method is called in a web request.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.CustomData">
            <summary>
            Optional custom data that can be filled and used.
            </summary>
        </member>
        <member name="P:Abp.Auditing.AuditInfo.Exception">
            <summary>
            Exception object, if an exception occured during execution of the method.
            </summary>
        </member>
        <member name="T:Abp.Auditing.IAuditingConfiguration">
            <summary>
            Used to configure auditing.
            </summary>
        </member>
        <member name="P:Abp.Auditing.IAuditingConfiguration.IsEnabled">
            <summary>
            Used to enable/disable auditing system.
            Default: true. Set false to completely disable it.
            </summary>
        </member>
        <member name="P:Abp.Auditing.IAuditingConfiguration.IsEnabledForAnonymousUsers">
            <summary>
            Set true to enable saving audit logs if current user is not logged in.
            Default: false.
            </summary>
        </member>
        <member name="P:Abp.Auditing.IAuditingConfiguration.MvcControllers">
            <summary>
            Used to configure auditing for MVC Controllers.
            </summary>
        </member>
        <member name="P:Abp.Auditing.IAuditingConfiguration.Selectors">
            <summary>
            List of selectors to select classes/interfaces which should be audited as default.
            </summary>
        </member>
        <member name="T:Abp.Auditing.IAuditingSelectorList">
            <summary>
            List of selector functions to select classes/interfaces to be audited.
            </summary>
        </member>
        <member name="M:Abp.Auditing.IAuditingSelectorList.RemoveByName(System.String)">
            <summary>
            Removes a selector by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Abp.Auditing.DisableAuditingAttribute">
            <summary>
            Used to disable auditing for a single method or
            all methods of a class or interface.
            </summary>
        </member>
        <member name="T:Abp.Auditing.IAuditInfoProvider">
            <summary>
            Provides an interface to provide audit informations in the upper layers.
            </summary>
        </member>
        <member name="M:Abp.Auditing.IAuditInfoProvider.Fill(Abp.Auditing.AuditInfo)">
            <summary>
            Called to fill needed properties.
            </summary>
            <param name="auditInfo">Audit info that is partially filled</param>
        </member>
        <member name="T:Abp.Auditing.IAuditingStore">
            <summary>
            This interface should be implemented by vendors to
            make auditing working.
            Default implementation is <see cref="T:Abp.Auditing.SimpleLogAuditingStore"/>.
            </summary>
        </member>
        <member name="M:Abp.Auditing.IAuditingStore.SaveAsync(Abp.Auditing.AuditInfo)">
            <summary>
            Should save audits to a persistent store.
            </summary>
            <param name="auditInfo">Audit informations</param>
        </member>
        <member name="T:Abp.Auditing.NullAuditInfoProvider">
            <summary>
            Null implementation of <see cref="T:Abp.Auditing.IAuditInfoProvider"/>.
            </summary>
        </member>
        <member name="T:Abp.Auditing.SimpleLogAuditingStore">
            <summary>
            Implements <see cref="T:Abp.Auditing.IAuditingStore"/> to simply write audits to logs.
            </summary>
        </member>
        <member name="P:Abp.Auditing.SimpleLogAuditingStore.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Abp.Reflection.TypeHelper">
            <summary>
            Some simple type-checking methods used internally.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.CacheExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Runtime.Caching.ICache"/>.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.CacheManagerBase">
            <summary>
            Base class for cache managers.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.ICacheManager">
            <summary>
            An upper level container for <see cref="T:Abp.Runtime.Caching.ICache"/> objects. 
            A cache manager should work as Singleton and track and manage <see cref="T:Abp.Runtime.Caching.ICache"/> objects.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.ICacheManager.GetAllCaches">
            <summary>
            Gets all caches.
            </summary>
            <returns>List of caches</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ICacheManager.GetCache(System.String)">
            <summary>
            Gets (or creates) a cache.
            </summary>
            <param name="name">Unique name of the cache</param>
            <returns>The cache reference</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.CacheManagerBase.#ctor(Abp.Dependency.IIocManager,Abp.Runtime.Caching.Configuration.ICachingConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="iocManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Abp.Runtime.Caching.CacheManagerBase.CreateCacheImplementation(System.String)">
            <summary>
            Used to create actual cache implementation.
            </summary>
            <param name="name">Name of the cache</param>
            <returns>Cache object</returns>
        </member>
        <member name="T:Abp.Runtime.Caching.CacheBase">
            <summary>
            Base class for caches.
            It's used to simplify implementing <see cref="T:Abp.Runtime.Caching.ICache"/>.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.ICache">
            <summary>
            Defines a cache that can be store and get items by keys.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.Get(System.String,System.Func{System.String,System.Object})">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.GetAsync(System.String,System.Func{System.String,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.GetOrDefault(System.String)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.GetOrDefaultAsync(System.String)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.Set(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.Remove(System.String)">
            <summary>
            Removes a cache item by it's key.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.RemoveAsync(System.String)">
            <summary>
            Removes a cache item by it's key.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.Clear">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.ICache.ClearAsync">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Caching.ICache.Name">
            <summary>
            Unique name of the cache.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Caching.ICache.DefaultSlidingExpireTime">
            <summary>
            Default sliding expire time of cache items.
            Default value: 60 minutes. Can be changed by configuration.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.CacheBase.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Abp.Runtime.Caching.ITypedCache`2">
            <summary>
            An interface to work with cache in a typed manner.
            Use <see cref="M:Abp.Runtime.Caching.CacheExtensions.AsTyped``2(Abp.Runtime.Caching.ICache)"/> method
            to convert a <see cref="T:Abp.Runtime.Caching.ICache"/> to this interface.
            </summary>
            <typeparam name="TKey">Key type for cache items</typeparam>
            <typeparam name="TValue">Value type for cache items</typeparam>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.Get(`0,System.Func{`0,`1})">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.GetAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.GetOrDefault(`0)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.GetOrDefaultAsync(`0)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.Set(`0,`1,System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.SetAsync(`0,`1,System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.Remove(`0)">
            <summary>
            Removes a cache item by it's key.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.RemoveAsync(`0)">
            <summary>
            Removes a cache item by it's key.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.Clear">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.ITypedCache`2.ClearAsync">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Caching.ITypedCache`2.Name">
            <summary>
            Unique name of the cache.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Caching.ITypedCache`2.DefaultSlidingExpireTime">
            <summary>
            Default sliding expire time of cache items.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Caching.ITypedCache`2.InternalCache">
            <summary>
            Gets the internal cache.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.Memory.AbpMemoryCache">
            <summary>
            Implements <see cref="T:Abp.Runtime.Caching.ICache"/> to work with <see cref="T:System.Runtime.Caching.MemoryCache"/>.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AbpMemoryCache.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Unique name of the cache</param>
        </member>
        <member name="T:Abp.Runtime.Caching.Memory.AbpMemoryCacheManager">
            <summary>
            Implements <see cref="T:Abp.Runtime.Caching.ICacheManager"/> to work with <see cref="T:System.Runtime.Caching.MemoryCache"/>.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AbpMemoryCacheManager.#ctor(Abp.Dependency.IIocManager,Abp.Runtime.Caching.Configuration.ICachingConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.TypedCacheExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Runtime.Caching.ITypedCache`2"/>.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.TypedCacheWrapper`2">
            <summary>
            Implements <see cref="T:Abp.Runtime.Caching.ITypedCache`2"/> to wrap a <see cref="T:Abp.Runtime.Caching.ICache"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Abp.Runtime.Caching.TypedCacheWrapper`2.#ctor(Abp.Runtime.Caching.ICache)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.TypedCacheWrapper`2"/> object.
            </summary>
            <param name="internalCache">The actual internal cache</param>
        </member>
        <member name="T:Abp.Runtime.Validation.DisableValidationAttribute">
            <summary>
            Can be added to a method to disable auto validation.
            </summary>
        </member>
        <member name="T:Abp.Text.FormattedStringValueExtracter">
            <summary>
            This class is used to extract dynamic values from a formatted string.
            It works as reverse of <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <example>
            Say that str is "My name is Neo." and format is "My name is {name}.".
            Then Extract method gets "Neo" as "name".  
            </example>
        </member>
        <member name="M:Abp.Text.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extracts dynamic values from a formatted string.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="ignoreCase">True, to search case-insensitive.</param>
        </member>
        <member name="M:Abp.Text.FormattedStringValueExtracter.IsMatch(System.String,System.String,System.String[]@,System.Boolean)">
            <summary>
            Checks if given <see cref="!:str"/> fits to given <see cref="!:format"/>.
            Also gets extracted values.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="values">Array of extracted values if matched</param>
            <param name="ignoreCase">True, to search case-insensitive</param>
            <returns>True, if matched.</returns>
        </member>
        <member name="T:Abp.Text.FormattedStringValueExtracter.ExtractionResult">
            <summary>
            Used as return value of <see cref="M:Abp.Text.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Abp.Text.FormattedStringValueExtracter.ExtractionResult.IsMatch">
            <summary>
            Is fully matched.
            </summary>
        </member>
        <member name="P:Abp.Text.FormattedStringValueExtracter.ExtractionResult.Matches">
            <summary>
            List of matched dynamic values.
            </summary>
        </member>
        <member name="T:Abp.Localization.Sources.LocalizationSourceExtensionInfo">
            <summary>
            Used to store a localization source extension information.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.LocalizationSourceExtensionInfo.#ctor(System.String,Abp.Localization.Dictionaries.ILocalizationDictionaryProvider)">
            <summary>
            Creates a new <see cref="T:Abp.Localization.Sources.LocalizationSourceExtensionInfo"/> object.
            </summary>
            <param name="sourceName">Source name</param>
            <param name="dictionaryProvider">Extension dictionaries</param>
        </member>
        <member name="P:Abp.Localization.Sources.LocalizationSourceExtensionInfo.SourceName">
            <summary>
            Source name.
            </summary>
        </member>
        <member name="P:Abp.Localization.Sources.LocalizationSourceExtensionInfo.DictionaryProvider">
            <summary>
            Extension dictionaries.
            </summary>
        </member>
        <member name="T:Abp.DisposeAction">
            <summary>
            This class can be used to provide an action when
            Dipose method is called.
            </summary>
        </member>
        <member name="M:Abp.DisposeAction.#ctor(System.Action)">
            <summary>
            Creates a new <see cref="T:Abp.DisposeAction"/> object.
            </summary>
            <param name="action">Action to be executed when this object is disposed.</param>
        </member>
        <member name="T:Abp.Domain.Uow.AbpDataFilters">
            <summary>
            Standard filters of ABP.
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.AbpDataFilters.SoftDelete">
            <summary>
            "SoftDelete".
            Soft delete filter.
            Prevents getting deleted data from database.
            See <see cref="T:Abp.Domain.Entities.ISoftDelete"/> interface.
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.AbpDataFilters.MustHaveTenant">
            <summary>
            "MustHaveTenant".
            Tenant filter to prevent getting data that is
            not belong to current tenant.
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.AbpDataFilters.MayHaveTenant">
            <summary>
            "MayHaveTenant".
            Tenant filter to prevent getting data that is
            not belong to current tenant.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.AbpDataFilters.Parameters">
            <summary>
            Standard parameters of ABP.
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.AbpDataFilters.Parameters.TenantId">
            <summary>
            "tenantId".
            </summary>
        </member>
        <member name="T:Abp.Extensions.ExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:Abp.Extensions.ExceptionExtensions.ReThrow(System.Exception)">
            <summary>
            Uses <see cref="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)"/> method to re-throws exception
            while preserving stack trace.
            </summary>
            <param name="exception">Exception to be re-thrown</param>
        </member>
        <member name="T:Abp.Localization.Dictionaries.IDictionaryBasedLocalizationSource">
            <summary>
            Interface for a dictionary based localization source.
            </summary>
        </member>
        <member name="T:Abp.Localization.Sources.ILocalizationSource">
            <summary>
            A Localization Source is used to obtain localized strings.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.ILocalizationSource.Initialize(Abp.Configuration.Startup.ILocalizationConfiguration,Abp.Dependency.IIocResolver)">
            <summary>
            This method is called by ABP before first usage.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.ILocalizationSource.GetString(System.String)">
            <summary>
            Gets localized string for given name in current language.
            </summary>
            <param name="name">Key name</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.Sources.ILocalizationSource.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets localized string for given name and specified culture.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.Sources.ILocalizationSource.GetAllStrings">
            <summary>
            Gets all strings in current language.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.ILocalizationSource.GetAllStrings(System.Globalization.CultureInfo)">
            <summary>
            Gets all strings in specified culture.
            </summary>
        </member>
        <member name="P:Abp.Localization.Sources.ILocalizationSource.Name">
            <summary>
            Unique Name of the source.
            </summary>
        </member>
        <member name="M:Abp.Localization.Dictionaries.IDictionaryBasedLocalizationSource.Extend(Abp.Localization.Dictionaries.ILocalizationDictionary)">
            <summary>
            Extends the source with given dictionary.
            </summary>
            <param name="dictionary">Dictionary to extend the source</param>
        </member>
        <member name="T:Abp.Timing.Clock">
            <summary>
            Used to perform some common date-time operations.
            </summary>
        </member>
        <member name="M:Abp.Timing.Clock.Normalize(System.DateTime)">
            <summary>
            Normalizes given <see cref="T:System.DateTime"/> using current <see cref="P:Abp.Timing.Clock.Provider"/>.
            </summary>
            <param name="dateTime">DateTime to be normalized.</param>
            <returns>Normalized DateTime</returns>
        </member>
        <member name="P:Abp.Timing.Clock.Provider">
            <summary>
            This object is used to perform all <see cref="T:Abp.Timing.Clock"/> operations.
            Default value: <see cref="T:Abp.Timing.LocalClockProvider"/>.
            </summary>
        </member>
        <member name="P:Abp.Timing.Clock.Now">
            <summary>
            Gets Now using current <see cref="P:Abp.Timing.Clock.Provider"/>.
            </summary>
        </member>
        <member name="T:Abp.Timing.IClockProvider">
            <summary>
            Defines interface to perform some common date-time operations.
            </summary>
        </member>
        <member name="M:Abp.Timing.IClockProvider.Normalize(System.DateTime)">
            <summary>
            Normalizes given <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">DateTime to be normalized.</param>
            <returns>Normalized DateTime</returns>
        </member>
        <member name="P:Abp.Timing.IClockProvider.Now">
            <summary>
            Gets Now.
            </summary>
        </member>
        <member name="T:Abp.MultiTenancy.MultiTenancyExtensions">
            <summary>
            Extension methods for multi-tenancy.
            </summary>
        </member>
        <member name="M:Abp.MultiTenancy.MultiTenancyExtensions.GetMultiTenancySide(Abp.Domain.Entities.IMayHaveTenant)">
            <summary>
            Gets multi-tenancy side (<see cref="T:Abp.MultiTenancy.MultiTenancySides"/>) of an object that implements <see cref="T:Abp.Domain.Entities.IMayHaveTenant"/>.
            </summary>
            <param name="obj">The object</param>
        </member>
        <member name="T:Abp.NamedTypeSelector">
            <summary>
            Used to represent a named type selector.
            </summary>
        </member>
        <member name="M:Abp.NamedTypeSelector.#ctor(System.String,System.Func{System.Type,System.Boolean})">
            <summary>
            Creates new <see cref="T:Abp.NamedTypeSelector"/> object.
            </summary>
            <param name="name">Name</param>
            <param name="predicate">Predicate</param>
        </member>
        <member name="P:Abp.NamedTypeSelector.Name">
            <summary>
            Name of the selector.
            </summary>
        </member>
        <member name="P:Abp.NamedTypeSelector.Predicate">
            <summary>
            Predicate.
            </summary>
        </member>
        <member name="T:Abp.Authorization.AbpAuthorizeAttribute">
            <summary>
            This attribute is used on a method of an Application Service (A class that implements <see cref="T:Abp.Application.Services.IApplicationService"/>)
            to make that method usable only by authorized users.
            </summary>
        </member>
        <member name="T:Abp.Authorization.IAbpAuthorizeAttribute">
            <summary>
            Defines standard interface for authorization attributes.
            </summary>
        </member>
        <member name="P:Abp.Authorization.IAbpAuthorizeAttribute.Permissions">
            <summary>
            A list of permissions to authorize.
            </summary>
        </member>
        <member name="P:Abp.Authorization.IAbpAuthorizeAttribute.RequireAllPermissions">
            <summary>
            If this property is set to true, all of the <see cref="P:Abp.Authorization.IAbpAuthorizeAttribute.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Abp.Authorization.IAbpAuthorizeAttribute.Permissions"/> must be granted.
            Default: false.
            </summary>
        </member>
        <member name="M:Abp.Authorization.AbpAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Creates a new instance of <see cref="T:Abp.Authorization.AbpAuthorizeAttribute"/> class.
            </summary>
            <param name="permissions">A list of permissions to authorize</param>
        </member>
        <member name="P:Abp.Authorization.AbpAuthorizeAttribute.Permissions">
            <summary>
            A list of permissions to authorize.
            </summary>
        </member>
        <member name="P:Abp.Authorization.AbpAuthorizeAttribute.RequireAllPermissions">
            <summary>
            If this property is set to true, all of the <see cref="P:Abp.Authorization.AbpAuthorizeAttribute.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Abp.Authorization.AbpAuthorizeAttribute.Permissions"/> must be granted.
            Default: false.
            </summary>
        </member>
        <member name="T:Abp.Authorization.Interceptors.AuthorizationInterceptor">
            <summary>
            This class is used to intercept methods to make authorization if the method defined <see cref="T:Abp.Authorization.AbpAuthorizeAttribute"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.ApplicationService">
            <summary>
            This class can be used as a base class for application services. 
            </summary>
        </member>
        <member name="T:Abp.Application.Services.IApplicationService">
            <summary>
            This interface must be implemented by all application services to identify them by convention.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.ApplicationService.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.ApplicationService.IsGrantedAsync(System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Abp.Application.Services.ApplicationService.IsGranted(System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="P:Abp.Application.Services.ApplicationService.AbpSession">
            <summary>
            Gets current session information.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.ApplicationService.PermissionManager">
            <summary>
            Reference to the permission manager.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.ApplicationService.PermissionChecker">
            <summary>
            Reference to the permission checker.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.ApplicationService.CurrentSession">
            <summary>
            Gets current session information.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.AuditedEntityDto">
            <summary>
            A shortcut of <see cref="T:Abp.Application.Services.Dto.AuditedEntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.CreationAuditedEntityDto">
            <summary>
             A shortcut of <see cref="T:Abp.Application.Services.Dto.CreationAuditedEntityDto"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityDto">
            <summary>
            A shortcut of <see cref="T:Abp.Application.Services.Dto.EntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityDto.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityDto"/> object.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.EntityDto.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.EntityDto"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="T:Abp.Application.Services.Dto.IDoubleWayDto">
            <summary>
            This interface can be used to mark a DTO as both of <see cref="T:Abp.Application.Services.Dto.IInputDto"/> and <see cref="T:Abp.Application.Services.Dto.IOutputDto"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IHasLongTotalCount">
            <summary>
            This interface is defined to standardize to set "Total Count of Items" to a DTO for long type.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.IHasLongTotalCount.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.ILimitedResultRequest">
            <summary>
            This interface is defined to standardize to request a limited result.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.ILimitedResultRequest.MaxResultCount">
            <summary>
            Max expected result count.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IPagedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged result.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.IPagedResultRequest.SkipCount">
            <summary>
            Skip count (beginning of the page).
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.ISortedResultRequest">
            <summary>
            This interface is defined to standardize to request a sorted result.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.ISortedResultRequest.Sorting">
            <summary>
            Sorting information.
            Should include sorting field and optionally a direction (ASC or DESC)
            Can contain more than one field separated by comma (,).
            </summary>
            <example>
            Examples:
            "Name"
            "Name DESC"
            "Name ASC, Age DESC"
            </example>
        </member>
        <member name="T:Abp.Authorization.AbpAuthorizationException">
            <summary>
            This exception is thrown on an unauthorized request.
            </summary>
        </member>
        <member name="T:Abp.AbpException">
            <summary>
            Base exception type for those are thrown by Abp system for Abp specific exceptions.
            </summary>
        </member>
        <member name="M:Abp.AbpException.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.AbpException"/> object.
            </summary>
        </member>
        <member name="M:Abp.AbpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Abp.AbpException"/> object.
            </summary>
        </member>
        <member name="M:Abp.AbpException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Abp.AbpException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Abp.AbpException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Abp.AbpException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Abp.Authorization.AbpAuthorizationException.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.AbpAuthorizationException"/> object.
            </summary>
        </member>
        <member name="M:Abp.Authorization.AbpAuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.AbpAuthorizationException"/> object.
            </summary>
        </member>
        <member name="M:Abp.Authorization.AbpAuthorizationException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.AbpAuthorizationException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Abp.Authorization.AbpAuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Abp.Authorization.AbpAuthorizationException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Abp.Authorization.IPermissionChecker">
            <summary>
            This class is used to permissions for users.
            </summary>
        </member>
        <member name="M:Abp.Authorization.IPermissionChecker.IsGrantedAsync(System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Abp.Authorization.IPermissionChecker.IsGrantedAsync(System.Int64,System.String)">
            <summary>
            Checks if a user is granted for a permission.
            </summary>
            <param name="userId">Id of the user to check</param>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="T:Abp.Authorization.IPermissionDefinitionContext">
            <summary>
            This context is used on <see cref="M:Abp.Authorization.AuthorizationProvider.SetPermissions(Abp.Authorization.IPermissionDefinitionContext)"/> method.
            </summary>
        </member>
        <member name="M:Abp.Authorization.IPermissionDefinitionContext.CreatePermission(System.String,Abp.Localization.ILocalizableString,System.Boolean,Abp.Localization.ILocalizableString,Abp.MultiTenancy.MultiTenancySides)">
            <summary>
            Creates a new permission under this group.
            </summary>
            <param name="name">Unique name of the permission</param>
            <param name="displayName">Display name of the permission</param>
            <param name="isGrantedByDefault">Is this permission granted by default. Default value: false.</param>
            <param name="description">A brief description for this permission</param>
            <param name="multiTenancySides">Which side can use this permission</param>
            <returns>New created permission</returns>
        </member>
        <member name="M:Abp.Authorization.IPermissionDefinitionContext.GetPermissionOrNull(System.String)">
            <summary>
            Gets a permission with given name or null if can not find.
            </summary>
            <param name="name">Unique name of the permission</param>
            <returns>Permission object or null</returns>
        </member>
        <member name="T:Abp.Authorization.PermissionFinder">
            <summary>
            This class is used to get permissions out of the system.
            Normally, you should inject and use <see cref="T:Abp.Authorization.IPermissionManager"/> and use it.
            This class can be used in database migrations or in unit tests where Abp is not initialized.
            </summary>
        </member>
        <member name="M:Abp.Authorization.PermissionFinder.GetAllPermissions(Abp.Authorization.AuthorizationProvider[])">
            <summary>
            Collects and gets all permissions in given providers.
            This method can be used to get permissions in database migrations or in unit tests where Abp is not initialized.
            Otherwise, use <see cref="M:Abp.Authorization.IPermissionManager.GetAllPermissions(System.Boolean)"/> method.
            
            </summary>
            <param name="authorizationProviders">Authorization providers</param>
            <returns>List of permissions</returns>
            <remarks>
            This method creates instances of <see cref="!:authorizationProviders"/> by order and
            calls <see cref="M:Abp.Authorization.AuthorizationProvider.SetPermissions(Abp.Authorization.IPermissionDefinitionContext)"/> to build permission list.
            So, providers should not use dependency injection.
            </remarks>
        </member>
        <member name="T:Abp.Configuration.Startup.IMultiTenancyConfig">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IMultiTenancyConfig.IsEnabled">
            <summary>
            Is multi-tenancy enabled?
            Default value: false.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.MultiTenancyConfig">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.MultiTenancyConfig.IsEnabled">
            <summary>
            Is multi-tenancy enabled?
            Default value: false.
            </summary>
        </member>
        <member name="T:Abp.Collections.Extensions.ListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Abp.Collections.Extensions.ListExtensions.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Sort a list by a topological sorting, which consider their  dependencies
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="source">A list of objects to sort</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <returns></returns>
        </member>
        <member name="M:Abp.Collections.Extensions.ListExtensions.SortByDependenciesVisit``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="item">Item to resolve</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <param name="sorted">List with the sortet items</param>
            <param name="visited">Dictionary with the visited items</param>
        </member>
        <member name="T:Abp.Dependency.IocRegistrarExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Dependency.IIocRegistrar"/> interface.
            </summary>
        </member>
        <member name="M:Abp.Dependency.IocRegistrarExtensions.RegisterIfNot``1(Abp.Dependency.IIocRegistrar,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration if it's not registered before.
            </summary>
            <typeparam name="T">Type of the class</typeparam>
            <param name="iocRegistrar">Registrar</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IocRegistrarExtensions.RegisterIfNot(Abp.Dependency.IIocRegistrar,System.Type,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration if it's not registered before.
            </summary>
            <param name="iocRegistrar">Registrar</param>
            <param name="type">Type of the class</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IocRegistrarExtensions.RegisterIfNot``2(Abp.Dependency.IIocRegistrar,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation if it's not registered before.
            </summary>
            <typeparam name="TType">Registering type</typeparam>
            <typeparam name="TImpl">The type that implements <see cref="!:TType"/></typeparam>
            <param name="iocRegistrar">Registrar</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IocRegistrarExtensions.RegisterIfNot(Abp.Dependency.IIocRegistrar,System.Type,System.Type,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation if it's not registered before.
            </summary>
            <param name="iocRegistrar">Registrar</param>
            <param name="type">Type of the class</param>
            <param name="impl">The type that implements <paramref name="type"/></param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="T:Abp.MultiTenancy.MultiTenancySides">
            <summary>
            Represents sides in a multi tenancy application.
            </summary>
        </member>
        <member name="F:Abp.MultiTenancy.MultiTenancySides.Tenant">
            <summary>
            Tenant side.
            </summary>
        </member>
        <member name="F:Abp.MultiTenancy.MultiTenancySides.Host">
            <summary>
            Host (tenancy owner) side.
            </summary>
        </member>
        <member name="T:Abp.Authorization.NullPermissionChecker">
            <summary>
            Null (and default) implementation of <see cref="T:Abp.Authorization.IPermissionChecker"/>.
            </summary>
        </member>
        <member name="M:Abp.Authorization.NullPermissionChecker.IsGrantedAsync(System.Int64,System.String)">
            <summary>
            Checks if a user is granted for a permission.
            </summary>
            <param name="userId">Id of the user to check</param>
            <param name="permissionName">Name of the permission</param>
            <returns><c>true</c> if this instance is granted the specified userId permissionName; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Abp.Authorization.NullPermissionChecker.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Abp.Authorization.PermissionCheckerExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Authorization.IPermissionChecker"/>
            </summary>
        </member>
        <member name="M:Abp.Authorization.PermissionCheckerExtensions.IsGranted(Abp.Authorization.IPermissionChecker,System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Abp.Authorization.PermissionCheckerExtensions.IsGranted(Abp.Authorization.IPermissionChecker,System.Int64,System.String)">
            <summary>
            Checks if a user is granted for a permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="userId">Id of the user to check</param>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Abp.Authorization.PermissionCheckerExtensions.Authorize(Abp.Authorization.IPermissionChecker,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Abp.Authorization.AbpAuthorizationException"/> if not authorized.
            User it authorized if any of the <see cref="!:permissionNames"/> are granted.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Abp.Authorization.AbpAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="M:Abp.Authorization.PermissionCheckerExtensions.Authorize(Abp.Authorization.IPermissionChecker,System.Boolean,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Abp.Authorization.AbpAuthorizationException"/> if not authorized.
            User it authorized if any of the <see cref="!:permissionNames"/> are granted.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="requireAll">
            If this is set to true, all of the <see cref="!:permissionNames"/> must be granted.
            If it's false, at least one of the <see cref="!:permissionNames"/> must be granted.
            </param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Abp.Authorization.AbpAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="M:Abp.Authorization.PermissionCheckerExtensions.AuthorizeAsync(Abp.Authorization.IPermissionChecker,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Abp.Authorization.AbpAuthorizationException"/> if not authorized.
            User it authorized if any of the <see cref="!:permissionNames"/> are granted.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Abp.Authorization.AbpAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="M:Abp.Authorization.PermissionCheckerExtensions.AuthorizeAsync(Abp.Authorization.IPermissionChecker,System.Boolean,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Abp.Authorization.AbpAuthorizationException"/> if not authorized.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="requireAll">
            If this is set to true, all of the <see cref="!:permissionNames"/> must be granted.
            If it's false, at least one of the <see cref="!:permissionNames"/> must be granted.
            </param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Abp.Authorization.AbpAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="T:Abp.Authorization.PermissionDictionary">
            <summary>
            Used to store and manipulate dictionary of permissions.
            </summary>
        </member>
        <member name="M:Abp.Authorization.PermissionDictionary.AddAllPermissions">
            <summary>
            Adds all child permissions of current permissions recursively.
            This is needed, because, 
            </summary>
        </member>
        <member name="M:Abp.Authorization.PermissionDictionary.AddPermissionRecursively(Abp.Authorization.Permission)">
            <summary>
            Adds a permission and it's all child permissions to dictionary.
            </summary>
            <param name="permission">Permission to be added</param>
        </member>
        <member name="T:Abp.Authorization.AuthorizationProvider">
            <summary>
            This is the main interface to define permissions for an application.
            Implement it to define permissions for your module.
            </summary>
        </member>
        <member name="M:Abp.Authorization.AuthorizationProvider.SetPermissions(Abp.Authorization.IPermissionDefinitionContext)">
            <summary>
            This method is called once on application startup to allow to define permissions.
            </summary>
            <param name="context">Permission definition context</param>
        </member>
        <member name="T:Abp.Authorization.IPermissionManager">
            <summary>
            Permission manager.
            </summary>
        </member>
        <member name="M:Abp.Authorization.IPermissionManager.GetPermission(System.String)">
            <summary>
            Gets <see cref="T:Abp.Authorization.Permission"/> object with given <paramref name="name"/> or throws exception
            if there is no permission with given <paramref name="name"/>.
            </summary>
            <param name="name">Unique name of the permission</param>
        </member>
        <member name="M:Abp.Authorization.IPermissionManager.GetPermissionOrNull(System.String)">
            <summary>
            Gets <see cref="T:Abp.Authorization.Permission"/> object with given <paramref name="name"/> or returns null
            if there is no permission with given <paramref name="name"/>.
            </summary>
            <param name="name">Unique name of the permission</param>
        </member>
        <member name="M:Abp.Authorization.IPermissionManager.GetAllPermissions(System.Boolean)">
            <summary>
            Gets all permissions.
            </summary>
            <param name="tenancyFilter">Can be passed false to disable tenancy filter.</param>
        </member>
        <member name="M:Abp.Authorization.IPermissionManager.GetAllPermissions(Abp.MultiTenancy.MultiTenancySides)">
            <summary>
            Gets all permissions.
            </summary>
            <param name="multiTenancySides">Multi-tenancy side to filter</param>
        </member>
        <member name="T:Abp.Authorization.Permission">
            <summary>
            Represents a permission.
            A permission is used to restrict functionalities of the application from unauthorized users.
            </summary>
        </member>
        <member name="M:Abp.Authorization.Permission.#ctor(System.String,Abp.Localization.ILocalizableString,System.Boolean,Abp.Localization.ILocalizableString,Abp.MultiTenancy.MultiTenancySides)">
            <summary>
            Creates a new Permission.
            </summary>
            <param name="name">Unique name of the permission</param>
            <param name="displayName">Display name of the permission</param>
            <param name="isGrantedByDefault">Is this permission granted by default. Default value: false.</param>
            <param name="description">A brief description for this permission</param>
            <param name="multiTenancySides">Which side can use this permission</param>
        </member>
        <member name="M:Abp.Authorization.Permission.CreateChildPermission(System.String,Abp.Localization.ILocalizableString,System.Boolean,Abp.Localization.ILocalizableString,Abp.MultiTenancy.MultiTenancySides)">
            <summary>
            Adds a child permission.
            A child permission can be granted only if parent is granted.
            </summary>
            <returns>Returns newly created child permission</returns>
        </member>
        <member name="P:Abp.Authorization.Permission.Parent">
            <summary>
            Parent of this permission if one exists.
            If set, this permission can be granted only if parent is granted.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Permission.Name">
            <summary>
            Unique name of the permission.
            This is the key name to grant permissions.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Permission.DisplayName">
            <summary>
            Display name of the permission.
            This can be used to show permission to the user.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Permission.Description">
            <summary>
            A brief description for this permission.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Permission.IsGrantedByDefault">
            <summary>
            Is this permission granted by default.
            Default value: false.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Permission.MultiTenancySides">
            <summary>
            Which side can use this permission.
            </summary>
        </member>
        <member name="P:Abp.Authorization.Permission.Children">
            <summary>
            List of child permissions. A child permission can be granted only if parent is granted.
            </summary>
        </member>
        <member name="T:Abp.Authorization.PermissionManager">
            <summary>
            Permission manager.
            </summary>
        </member>
        <member name="M:Abp.Authorization.PermissionManager.#ctor(Abp.Dependency.IIocManager,Abp.Configuration.Startup.IAuthorizationConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Abp.Collections.ITypeList">
            <summary>
            A shortcut for <see cref="T:Abp.Collections.ITypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:Abp.Collections.ITypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.IList`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="M:Abp.Collections.ITypeList`1.Add``1">
            <summary>
            Adds a type to list.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:Abp.Collections.ITypeList`1.Contains``1">
            <summary>
            Checks if a type exists in the list.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Abp.Collections.ITypeList`1.Remove``1">
            <summary>
            Removes a type from list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Abp.Configuration.IDictionaryBasedConfig">
            <summary>
            Defines interface to use a dictionary to make configurations.
            </summary>
        </member>
        <member name="M:Abp.Configuration.IDictionaryBasedConfig.Set``1(System.String,``0)">
            <summary>
            Used to set a string named configuration.
            If there is already a configuration with same <paramref name="name"/>, it's overwritten.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="value">Value of the configuration</param>
            <returns>Returns the passed <paramref name="value"/></returns>
        </member>
        <member name="M:Abp.Configuration.IDictionaryBasedConfig.Get(System.String)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.IDictionaryBasedConfig.Get``1(System.String)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.IDictionaryBasedConfig.Get(System.String,System.Object)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.IDictionaryBasedConfig.Get``1(System.String,``0)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.IDictionaryBasedConfig.GetOrCreate``1(System.String,System.Func{``0})">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="creator">The function that will be called to create if given configuration is not found</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="T:Abp.Configuration.SettingInfo">
            <summary>
            Represents a setting information.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingInfo.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Configuration.SettingInfo"/> object.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Configuration.SettingInfo"/> object.
            </summary>
            <param name="tenantId">TenantId for this setting. TenantId is null if this setting is not Tenant level.</param>
            <param name="userId">UserId for this setting. UserId is null if this setting is not user level.</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="P:Abp.Configuration.SettingInfo.TenantId">
            <summary>
            TenantId for this setting.
            TenantId is null if this setting is not Tenant level.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingInfo.UserId">
            <summary>
            UserId for this setting.
            UserId is null if this setting is not user level.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingInfo.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingInfo.Value">
            <summary>
            Value of the setting.
            </summary>
        </member>
        <member name="T:Abp.Collections.TypeList">
            <summary>
            A shortcut for <see cref="T:Abp.Collections.TypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:Abp.Collections.TypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.List`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="M:Abp.Collections.TypeList`1.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Collections.TypeList`1"/> object.
            </summary>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Add``1">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Insert(System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.IndexOf(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Contains``1">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Remove``1">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.CopyTo(System.Type[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Collections.TypeList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Collections.TypeList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Abp.Collections.TypeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Abp.Collections.TypeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="T:Abp.Configuration.SettingManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Configuration.ISettingManager"/>.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueAsync``1(Abp.Configuration.ISettingManager,System.String)">
            <summary>
            Gets value of a setting in given type (<see cref="!:T"/>).
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForApplicationAsync``1(Abp.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForTenantAsync``1(Abp.Configuration.ISettingManager,System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForUserAsync``1(Abp.Configuration.ISettingManager,System.String,System.Int32,System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValue(Abp.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting.
            It gets the setting value, overwritten by application and the current user if exists.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForApplication(Abp.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForTenant(Abp.Configuration.ISettingManager,System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForUser(Abp.Configuration.ISettingManager,System.String,System.Int32,System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValue``1(Abp.Configuration.ISettingManager,System.String)">
            <summary>
            Gets value of a setting.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForApplication``1(Abp.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForTenant``1(Abp.Configuration.ISettingManager,System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetSettingValueForUser``1(Abp.Configuration.ISettingManager,System.String,System.Int32,System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetAllSettingValues(Abp.Configuration.ISettingManager)">
            <summary>
            Gets current values of all settings.
            It gets all setting values, overwritten by application and the current user if exists.
            </summary>
            <param name="settingManager">Setting manager</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetAllSettingValuesForApplication(Abp.Configuration.ISettingManager)">
            <summary>
            Gets a list of all setting values specified for the application.
            It returns only settings those are explicitly set for the application.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Abp.Configuration.SettingManagerExtensions.GetAllSettingValues(Abp.Configuration.ISettingManager)"/> method.
            </summary>
            <param name="settingManager">Setting manager</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetAllSettingValuesForTenant(Abp.Configuration.ISettingManager,System.Int32)">
            <summary>
            Gets a list of all setting values specified for a tenant.
            It returns only settings those are explicitly set for the tenant.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Abp.Configuration.SettingManagerExtensions.GetAllSettingValues(Abp.Configuration.ISettingManager)"/> method.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="tenantId">Tenant to get settings</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.GetAllSettingValuesForTenant(Abp.Configuration.ISettingManager,System.Int64)">
            <summary>
            Gets a list of all setting values specified for a user.
            It returns only settings those are explicitly set for the user.
            If a setting's value is not set for the user (for example if user uses the default value), it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Abp.Configuration.SettingManagerExtensions.GetAllSettingValues(Abp.Configuration.ISettingManager)"/> method.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="userId">User to get settings</param>
            <returns>All settings of the user</returns>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.ChangeSettingForApplication(Abp.Configuration.ISettingManager,System.String,System.String)">
            <summary>
            Changes setting for the application level.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.ChangeSettingForTenant(Abp.Configuration.ISettingManager,System.Int32,System.String,System.String)">
            <summary>
            Changes setting for a Tenant.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="tenantId">TenantId</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Abp.Configuration.SettingManagerExtensions.ChangeSettingForUser(Abp.Configuration.ISettingManager,System.Int64,System.String,System.String)">
            <summary>
            Changes setting for a user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="userId">UserId</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="T:Abp.Configuration.Startup.IAuthorizationConfiguration">
            <summary>
            Used to configure authorization system.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAuthorizationConfiguration.Providers">
            <summary>
            List of authorization providers.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.IEventBusConfiguration">
            <summary>
            Used to configure <see cref="T:Abp.Events.Bus.IEventBus"/>.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IEventBusConfiguration.UseDefaultEventBus">
            <summary>
            True, to use <see cref="P:Abp.Events.Bus.EventBus.Default"/>.
            False, to create per <see cref="T:Abp.Dependency.IIocManager"/>.
            This is generally set to true. But, for unit tests,
            it can be set to false.
            Default: true.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.ILocalizationSourceList">
            <summary>
            Defines a specialized list to store <see cref="T:Abp.Localization.Sources.ILocalizationSource"/> object.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.ILocalizationSourceList.Extensions">
            <summary>
            Extensions for dictionay based localization sources.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.INavigationConfiguration">
            <summary>
            Used to configure navigation.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.INavigationConfiguration.Providers">
            <summary>
            List of navigation providers.
            </summary>
        </member>
        <member name="T:Abp.Application.Navigation.NavigationProvider">
            <summary>
            This interface should be implemented by classes which change
            navigation of the application.
            </summary>
        </member>
        <member name="M:Abp.Application.Navigation.NavigationProvider.SetNavigation(Abp.Application.Navigation.INavigationProviderContext)">
            <summary>
            Used to set navigation.
            </summary>
            <param name="context">Navigation context</param>
        </member>
        <member name="T:Abp.Configuration.Startup.ISettingsConfiguration">
            <summary>
            Used to configure setting system.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.ISettingsConfiguration.Providers">
            <summary>
            List of settings providers.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.LocalizationSourceList">
            <summary>
            A specialized list to store <see cref="T:Abp.Localization.Sources.ILocalizationSource"/> object.
            </summary>
        </member>
        <member name="M:Abp.Configuration.Startup.LocalizationSourceList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.IModuleConfigurations">
            <summary>
            Used to provide a way to configure modules.
            Create entension methods to this class to be used over <see cref="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Modules"/> object.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IModuleConfigurations.AbpConfiguration">
            <summary>
            Gets the ABP configuration object.
            </summary>
        </member>
        <member name="T:Abp.Timing.DateTimeRange">
            <summary>
            A basic implementation of <see cref="T:Abp.Timing.IDateTimeRange"/> to store a date range.
            </summary>
        </member>
        <member name="T:Abp.Timing.IDateTimeRange">
            <summary>
            Defines interface for a DateTime range.
            </summary>
        </member>
        <member name="P:Abp.Timing.IDateTimeRange.StartTime">
            <summary>
            Start time of the datetime range.
            </summary>
        </member>
        <member name="P:Abp.Timing.IDateTimeRange.EndTime">
            <summary>
            End time of the datetime range.
            </summary>
        </member>
        <member name="M:Abp.Timing.DateTimeRange.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Timing.DateTimeRange"/> object.
            </summary>
        </member>
        <member name="M:Abp.Timing.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new <see cref="T:Abp.Timing.DateTimeRange"/> object from given <paramref name="startTime"/> and <paramref name="endTime"/>.
            </summary>
            <param name="startTime">Start time of the datetime range</param>
            <param name="endTime">End time of the datetime range</param>
        </member>
        <member name="M:Abp.Timing.DateTimeRange.#ctor(Abp.Timing.IDateTimeRange)">
            <summary>
            Creates a new <see cref="T:Abp.Timing.DateTimeRange"/> object from given <paramref name="dateTimeRange"/> object.
            </summary>
            <param name="dateTimeRange">IDateTimeRange object</param>
        </member>
        <member name="M:Abp.Timing.DateTimeRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Abp.Timing.DateTimeRange"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Abp.Timing.DateTimeRange"/>.</returns>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.StartTime">
            <summary>
            Start time of the datetime range.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.EndTime">
            <summary>
            End time of the datetime range.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.Yesterday">
            <summary>
            Gets a date range represents yesterday.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.Today">
            <summary>
            Gets a date range represents today.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.Tomorrow">
            <summary>
            Gets a date range represents tomorrow.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.LastMonth">
            <summary>
            Gets a date range represents the last month.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.ThisMonth">
            <summary>
            Gets a date range represents this month.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.NextMonth">
            <summary>
            Gets a date range represents the next month.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.LastYear">
            <summary>
            Gets a date range represents the last year.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.ThisYear">
            <summary>
            Gets a date range represents this year.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.NextYear">
            <summary>
            Gets a date range represents the next year.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.Last30Days">
            <summary>
            Gets a date range represents the last 30 days (30x24 hours) including today.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.Last30DaysExceptToday">
            <summary>
            Gets a date range represents the last 30 days excluding today.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.Last7Days">
            <summary>
            Gets a date range represents the last 7 days (7x24 hours) including today.
            </summary>
        </member>
        <member name="P:Abp.Timing.DateTimeRange.Last7DaysExceptToday">
            <summary>
            Gets a date range represents the last 7 days excluding today.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.AuditedEntity">
            <summary>
            A shortcut of <see cref="T:Abp.Domain.Entities.Auditing.AuditedEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.AuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Abp.Domain.Entities.Auditing.IAudited"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.CreationAuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Abp.Domain.Entities.Auditing.ICreationAudited"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.Entity`1">
            <summary>
            Basic implementation of IEntity interface.
            An entity can inherit this class of directly implement to IEntity interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.IEntity`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="M:Abp.Domain.Entities.IEntity`1.IsTransient">
            <summary>
            Checks if this entity is transient (not persisted to database and it has not an <see cref="P:Abp.Domain.Entities.IEntity`1.Id"/>).
            </summary>
            <returns>True, if this entity is transient</returns>
        </member>
        <member name="P:Abp.Domain.Entities.IEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Abp.Domain.Entities.Entity`1.IsTransient">
            <summary>
            Checks if this entity is transient (it has not an Id).
            </summary>
            <returns>True, if this entity is transient</returns>
        </member>
        <member name="M:Abp.Domain.Entities.Entity`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Entities.Entity`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Entities.Entity`1.op_Equality(Abp.Domain.Entities.Entity{`0},Abp.Domain.Entities.Entity{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Entities.Entity`1.op_Inequality(Abp.Domain.Entities.Entity{`0},Abp.Domain.Entities.Entity{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Entities.Entity`1.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Domain.Entities.Entity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Abp.Domain.Entities.Auditing.CreationAuditedEntity`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.CreationAuditedEntity`1.CreationTime">
            <summary>
            Creation time of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.CreationAuditedEntity`1.CreatorUserId">
            <summary>
            Creator of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.AuditedEntity`1.LastModificationTime">
            <summary>
            Last modification date of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.AuditedEntity`1.LastModifierUserId">
            <summary>
            Last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.CreationAuditedEntity">
            <summary>
            A shortcut of <see cref="T:Abp.Domain.Entities.Auditing.CreationAuditedEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.FullAuditedEntity">
            <summary>
            A shortcut of <see cref="T:Abp.Domain.Entities.Auditing.FullAuditedEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.FullAuditedEntity`1">
            <summary>
            Implements <see cref="T:Abp.Domain.Entities.Auditing.IFullAudited"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.FullAuditedEntity`1.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.FullAuditedEntity`1.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.FullAuditedEntity`1.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.IPassivable">
            <summary>
            This interface is used to make an entity active/passive.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.IPassivable.IsActive">
            <summary>
            True: This entity is active.
            False: This entity is not active.
            </summary>
        </member>
        <member name="T:Abp.Domain.Repositories.AbpRepositoryBase`2">
            <summary>
            Base class to implement <see cref="T:Abp.Domain.Repositories.IRepository`2"/>.
            It implements some methods in most simple way.
            </summary>
            <typeparam name="TEntity">Type of the Entity for this repository</typeparam>
            <typeparam name="TPrimaryKey">Primary key of the entity</typeparam>
        </member>
        <member name="T:Abp.Domain.Repositories.IRepository`2">
            <summary>
            This interface is implemented by all repositories to ensure implementation of fixed methods.
            </summary>
            <typeparam name="TEntity">Main Entity type this repository works on</typeparam>
            <typeparam name="TPrimaryKey">Primary key type of the entity</typeparam>
        </member>
        <member name="T:Abp.Domain.Repositories.IRepository">
            <summary>
            This interface must be implemented by all repositories to identify them by convention.
            Implement generic version instead of this one.
            </summary>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.GetAll">
            <summary>
            Used to get a IQueryable that is used to retrieve entities from entire table.
            <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> attribute must be used to be able to call this method since this method
            returns IQueryable and it requires open database connection to use it.
            </summary>
            <returns>IQueryable to be used to select entities from database</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.GetAllList">
            <summary>
            Used to get all entities.
            </summary>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.GetAllListAsync">
            <summary>
            Used to get all entities.
            </summary>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.GetAllList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Used to get all entities based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.GetAllListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Used to get all entities based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Query``1(System.Func{System.Linq.IQueryable{`0},``0})">
            <summary>
            Used to run a query over entire entities.
            <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> attribute is not always necessary (as opposite to <see cref="M:Abp.Domain.Repositories.IRepository`2.GetAll"/>)
            if <paramref name="queryMethod"/> finishes IQueryable with ToList, FirstOrDefault etc..
            </summary>
            <typeparam name="T">Type of return value of this method</typeparam>
            <param name="queryMethod">This method is used to query over entities</param>
            <returns>Query result</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Get(`1)">
            <summary>
            Gets an entity with given primary key.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.GetAsync(`1)">
            <summary>
            Gets an entity with given primary key.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets exactly one entity with given predicate.
            Throws exception if no entity or more than one entity.
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets exactly one entity with given predicate.
            Throws exception if no entity or more than one entity.
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.FirstOrDefault(`1)">
            <summary>
            Gets an entity with given primary key or null if not found.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity or null</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.FirstOrDefaultAsync(`1)">
            <summary>
            Gets an entity with given primary key or null if not found.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity or null</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets an entity with given given predicate or null if not found.
            </summary>
            <param name="predicate">Predicate to filter entities</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets an entity with given given predicate or null if not found.
            </summary>
            <param name="predicate">Predicate to filter entities</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Load(`1)">
            <summary>
            Creates an entity with given primary key without database access.
            </summary>
            <param name="id">Primary key of the entity to load</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Insert(`0)">
            <summary>
            Inserts a new entity.
            </summary>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.InsertAsync(`0)">
            <summary>
            Inserts a new entity.
            </summary>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.InsertAndGetId(`0)">
            <summary>
            Inserts a new entity and gets it's Id.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.InsertAndGetIdAsync(`0)">
            <summary>
            Inserts a new entity and gets it's Id.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.InsertOrUpdate(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.InsertOrUpdateAsync(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.InsertOrUpdateAndGetId(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            Also returns Id of the entity.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.InsertOrUpdateAndGetIdAsync(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            Also returns Id of the entity.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Update(`0)">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.UpdateAsync(`0)">
            <summary>
            Updates an existing entity. 
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Update(`1,System.Action{`0})">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="id">Id of the entity</param>
            <param name="updateAction">Action that can be used to change values of the entity</param>
            <returns>Updated entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.UpdateAsync(`1,System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="id">Id of the entity</param>
            <param name="updateAction">Action that can be used to change values of the entity</param>
            <returns>Updated entity</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Delete(`0)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">Entity to be deleted</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.DeleteAsync(`0)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">Entity to be deleted</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Delete(`1)">
            <summary>
            Deletes an entity by primary key.
            </summary>
            <param name="id">Primary key of the entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.DeleteAsync(`1)">
            <summary>
            Deletes an entity by primary key.
            </summary>
            <param name="id">Primary key of the entity</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes many entities by function.
            Notice that: All entities fits to given predicate are retrieved and deleted.
            This may cause major performance problems if there are too many entities with
            given predicate.
            </summary>
            <param name="predicate">A condition to filter entities</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes many entities by function.
            Notice that: All entities fits to given predicate are retrieved and deleted.
            This may cause major performance problems if there are too many entities with
            given predicate.
            </summary>
            <param name="predicate">A condition to filter entities</param>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Count">
            <summary>
            Gets count of all entities in this repository.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.CountAsync">
            <summary>
            Gets count of all entities in this repository.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.LongCount">
            <summary>
            Gets count of all entities in this repository (use if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.LongCountAsync">
            <summary>
            Gets count of all entities in this repository (use if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>
            (use this overload if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>).
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Abp.Domain.Repositories.IRepository`2.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>
            (use this overload if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>).
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="T:Abp.Domain.Uow.IActiveUnitOfWork">
            <summary>
            This interface is used to work with active unit of work.
            This interface can not be injected.
            Use <see cref="T:Abp.Domain.Uow.IUnitOfWorkManager"/> instead.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IActiveUnitOfWork.SaveChanges">
            <summary>
            Saves all changes until now in this unit of work.
            This method may be called to apply changes whenever needed.
            Note that if this unit of work is transactional, saved changes are also rolled back if transaction is rolled back.
            No explicit call is needed to SaveChanges generally, 
            since all changes saved at end of a unit of work automatically.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IActiveUnitOfWork.SaveChangesAsync">
            <summary>
            Saves all changes until now in this unit of work.
            This method may be called to apply changes whenever needed.
            Note that if this unit of work is transactional, saved changes are also rolled back if transaction is rolled back.
            No explicit call is needed to SaveChanges generally, 
            since all changes saved at end of a unit of work automatically.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IActiveUnitOfWork.DisableFilter(System.String[])">
            <summary>
            Disables one or more data filters.
            Does nothing for a filter if it's already disabled. 
            Use this method in a using statement to re-enable filters if needed.
            </summary>
            <param name="filterNames">One or more filter names. <see cref="T:Abp.Domain.Uow.AbpDataFilters"/> for standard filters.</param>
            <returns>A <see cref="T:System.IDisposable"/> handle to take back the disable effect.</returns>
        </member>
        <member name="M:Abp.Domain.Uow.IActiveUnitOfWork.EnableFilter(System.String[])">
            <summary>
            Enables one or more data filters.
            Does nothing for a filter if it's already enabled.
            Use this method in a using statement to re-disable filters if needed.
            </summary>
            <param name="filterNames">One or more filter names. <see cref="T:Abp.Domain.Uow.AbpDataFilters"/> for standard filters.</param>
            <returns>A <see cref="T:System.IDisposable"/> handle to take back the enable effect.</returns>
        </member>
        <member name="M:Abp.Domain.Uow.IActiveUnitOfWork.IsFilterEnabled(System.String)">
            <summary>
            Checks if a filter is enabled or not.
            </summary>
            <param name="filterName">Name of the filter. <see cref="T:Abp.Domain.Uow.AbpDataFilters"/> for standard filters.</param>
        </member>
        <member name="M:Abp.Domain.Uow.IActiveUnitOfWork.SetFilterParameter(System.String,System.String,System.Object)">
            <summary>
            Sets (overrides) value of a filter parameter.
            </summary>
            <param name="filterName">Name of the filter</param>
            <param name="parameterName">Parameter's name</param>
            <param name="value">Value of the parameter to be set</param>
        </member>
        <member name="E:Abp.Domain.Uow.IActiveUnitOfWork.Completed">
            <summary>
            This event is raised when this UOW is successfully completed.
            </summary>
        </member>
        <member name="E:Abp.Domain.Uow.IActiveUnitOfWork.Failed">
            <summary>
            This event is raised when this UOW is failed.
            </summary>
        </member>
        <member name="E:Abp.Domain.Uow.IActiveUnitOfWork.Disposed">
            <summary>
            This event is raised when this UOW is disposed.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IActiveUnitOfWork.Options">
            <summary>
            Gets if this unit of work is transactional.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IActiveUnitOfWork.Filters">
            <summary>
            Gets data filter configurations for this unit of work.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IActiveUnitOfWork.IsDisposed">
            <summary>
            Is this UOW disposed?
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.IUnitOfWorkCompleteHandle">
            <summary>
            Used to complete a unit of work.
            This interface can not be injected or directly used.
            Use <see cref="T:Abp.Domain.Uow.IUnitOfWorkManager"/> instead.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWorkCompleteHandle.Complete">
            <summary>
            Completes this unit of work.
            It saves all changes and commit transaction if exists.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWorkCompleteHandle.CompleteAsync">
            <summary>
            Completes this unit of work.
            It saves all changes and commit transaction if exists.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.ICurrentUnitOfWorkProvider">
            <summary>
            Used to get/set current <see cref="T:Abp.Domain.Uow.IUnitOfWork"/>. 
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.ICurrentUnitOfWorkProvider.Current">
            <summary>
            Gets/sets current <see cref="T:Abp.Domain.Uow.IUnitOfWork"/>.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.IUnitOfWorkDefaultOptions">
            <summary>
            Used to get/set default options for a unit of work.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.RegisterFilter(System.String,System.Boolean)">
            <summary>
            Registers a data filter to unit of work system.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <param name="isEnabledByDefault">Is filter enabled by default.</param>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.OverrideFilter(System.String,System.Boolean)">
            <summary>
            Overrides a data filter definition.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <param name="isEnabledByDefault">Is filter enabled by default.</param>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.Scope">
            <summary>
            Scope option.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.IsTransactional">
            <summary>
            Should unit of works be transactional.
            Default: true.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.Timeout">
            <summary>
            Gets/sets a timeout value for unit of works.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.IsolationLevel">
            <summary>
            Gets/sets isolation level of transaction.
            This is used if <see cref="P:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.IsTransactional"/> is true.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWorkDefaultOptions.Filters">
            <summary>
            Gets list of all data filter configurations.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.IUnitOfWorkManager">
            <summary>
            Unit of work manager.
            Used to begin and control a unit of work.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWorkManager.Begin">
            <summary>
            Begins a new unit of work.
            </summary>
            <returns>A handle to be able to complete the unit of work</returns>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWorkManager.Begin(System.Transactions.TransactionScopeOption)">
            <summary>
            Begins a new unit of work.
            </summary>
            <returns>A handle to be able to complete the unit of work</returns>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWorkManager.Begin(Abp.Domain.Uow.UnitOfWorkOptions)">
            <summary>
            Begins a new unit of work.
            </summary>
            <returns>A handle to be able to complete the unit of work</returns>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWorkManager.Current">
            <summary>
            Gets currently active unit of work (or null if not exists).
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.CallContextCurrentUnitOfWorkProvider">
            <summary>
            CallContext implementation of <see cref="T:Abp.Domain.Uow.ICurrentUnitOfWorkProvider"/>. 
            This is the default implementation.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.CallContextCurrentUnitOfWorkProvider.Current">
            <inheritdoc />
        </member>
        <member name="T:Abp.Domain.Uow.InnerUnitOfWorkCompleteHandle">
            <summary>
            This handle is used for innet unit of work scopes.
            A inner unit of work scope actually uses outer unit of work scope
            and has no effect on <see cref="M:Abp.Domain.Uow.IUnitOfWorkCompleteHandle.Complete"/> call.
            But if it's not called, an exception is thrown at end of the UOW to rollback the UOW.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.NullUnitOfWork">
            <summary>
            Null implementation of unit of work.
            It's used if no component registered for <see cref="T:Abp.Domain.Uow.IUnitOfWork"/>.
            This ensures working ABP without a database.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkBase">
            <summary>
            Base for all Unit Of Work classes.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.IUnitOfWork">
            <summary>
            Defines a unit of work.
            This interface is internally used by ABP.
            Use <see cref="M:Abp.Domain.Uow.IUnitOfWorkManager.Begin"/> to start a new unit of work.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.IUnitOfWork.Begin(Abp.Domain.Uow.UnitOfWorkOptions)">
            <summary>
            Begins the unit of work with given options.
            </summary>
            <param name="options">Unit of work options</param>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWork.Id">
            <summary>
            Unique id of this UOW.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.IUnitOfWork.Outer">
            <summary>
            Reference to the outer UOW if exists.
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.UnitOfWorkBase._isBeginCalledBefore">
            <summary>
            Is <see cref="M:Abp.Domain.Uow.UnitOfWorkBase.Begin(Abp.Domain.Uow.UnitOfWorkOptions)"/> method called before?
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.UnitOfWorkBase._isCompleteCalledBefore">
            <summary>
            Is <see cref="M:Abp.Domain.Uow.UnitOfWorkBase.Complete"/> method called before?
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.UnitOfWorkBase._succeed">
            <summary>
            Is this unit of work successfully completed.
            </summary>
        </member>
        <member name="F:Abp.Domain.Uow.UnitOfWorkBase._exception">
            <summary>
            A reference to the exception if this unit of work failed.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.#ctor(Abp.Domain.Uow.IUnitOfWorkDefaultOptions)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.Begin(Abp.Domain.Uow.UnitOfWorkOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.SaveChanges">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.SaveChangesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.DisableFilter(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.EnableFilter(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.IsFilterEnabled(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.SetFilterParameter(System.String,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.CompleteAsync">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.BeginUow">
            <summary>
            Should be implemented by derived classes to start UOW.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.CompleteUow">
            <summary>
            Should be implemented by derived classes to complete UOW.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.CompleteUowAsync">
            <summary>
            Should be implemented by derived classes to complete UOW.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.DisposeUow">
            <summary>
            Should be implemented by derived classes to dispose UOW.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.ApplyDisableFilter(System.String)">
            <summary>
            Concrete Unit of work classes should implement this
            method in order to disable a filter.
            Should not call base method since it throws <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="filterName">Filter name</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.ApplyEnableFilter(System.String)">
            <summary>
            Concrete Unit of work classes should implement this
            method in order to enable a filter.
            Should not call base method since it throws <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="filterName">Filter name</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.ApplyFilterParameterValue(System.String,System.String,System.Object)">
            <summary>
            Concrete Unit of work classes should implement this
            method in order to set a parameter's value.
            Should not call base method since it throws <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="filterName">Filter name</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.OnCompleted">
            <summary>
            Called to trigger <see cref="E:Abp.Domain.Uow.UnitOfWorkBase.Completed"/> event.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.OnFailed(System.Exception)">
            <summary>
            Called to trigger <see cref="E:Abp.Domain.Uow.UnitOfWorkBase.Failed"/> event.
            </summary>
            <param name="exception">Exception that cause failure</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkBase.OnDisposed">
            <summary>
            Called to trigger <see cref="E:Abp.Domain.Uow.UnitOfWorkBase.Disposed"/> event.
            </summary>
        </member>
        <member name="E:Abp.Domain.Uow.UnitOfWorkBase.Completed">
            <inheritdoc/>
        </member>
        <member name="E:Abp.Domain.Uow.UnitOfWorkBase.Failed">
            <inheritdoc/>
        </member>
        <member name="E:Abp.Domain.Uow.UnitOfWorkBase.Disposed">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkBase.Options">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkBase.Filters">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkBase.IsDisposed">
            <summary>
            Gets a value indicates that this unit of work is disposed or not.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkBase.AbpSession">
            <summary>
            Reference to current ABP session.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkDefaultOptions.IsTransactional">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkDefaultOptions.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkDefaultOptions.IsolationLevel">
            <inheritdoc/>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkFailedEventArgs">
            <summary>
            Used as event arguments on <see cref="E:Abp.Domain.Uow.IActiveUnitOfWork.Failed"/> event.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkFailedEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkFailedEventArgs"/> object.
            </summary>
            <param name="exception">Exception that caused failure</param>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkFailedEventArgs.Exception">
            <summary>
            Exception that caused failure.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkManager">
            <summary>
            Unit of work manager.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkOptions">
            <summary>
            Unit of work options.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkOptions.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkOptions"/> object.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkOptions.Scope">
            <summary>
            Scope option.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkOptions.IsTransactional">
            <summary>
            Is this UOW transactional?
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkOptions.Timeout">
            <summary>
            Timeout of UOW As milliseconds.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkOptions.IsolationLevel">
            <summary>
            If this UOW is transactional, this option indicated the isolation level of the transaction.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkOptions.AsyncFlowOption">
            <summary>
            This option should be set to <see cref="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled"/>
            if unit of work is used in an async scope.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkOptions.FilterOverrides">
            <summary>
            Can be used to enable/disable some filters. 
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Entities.EntityChangedEventData`1">
            <summary>
            Used to pass data for an event that is related to with a changed <see cref="T:Abp.Domain.Entities.IEntity"/> object.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="T:Abp.Events.Bus.Entities.EntityEventData`1">
            <summary>
            Used to pass data for an event that is related to with an <see cref="T:Abp.Domain.Entities.IEntity"/> object.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="T:Abp.Events.Bus.EventData">
            <summary>
            Implements <see cref="T:Abp.Events.Bus.IEventData"/> and provides a base for event data classes.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.IEventData">
            <summary>
            Defines interface for all Event data classes.
            </summary>
        </member>
        <member name="P:Abp.Events.Bus.IEventData.EventTime">
            <summary>
            The time when the event occured.
            </summary>
        </member>
        <member name="P:Abp.Events.Bus.IEventData.EventSource">
            <summary>
            The object which triggers the event (optional).
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.EventData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Abp.Events.Bus.EventData.EventTime">
            <summary>
            The time when the event occured.
            </summary>
        </member>
        <member name="P:Abp.Events.Bus.EventData.EventSource">
            <summary>
            The object which triggers the event (optional).
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.IEventDataWithInheritableGenericArgument">
            <summary>
            This interface must be implemented by event data classes that
            has a single generic argument and this argument will be used by inheritance. 
            
            For example;
            Assume that Student inherits From Person. When trigger an EntityCreatedEventData{Student},
            EntityCreatedEventData{Person} is also triggered if EntityCreatedEventData implements
            this interface.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.IEventDataWithInheritableGenericArgument.GetConstructorArgs">
            <summary>
            Gets arguments to create this class since a new instance of this class is created.
            </summary>
            <returns>Constructor arguments</returns>
        </member>
        <member name="M:Abp.Events.Bus.Entities.EntityEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Related entity with this event</param>
        </member>
        <member name="P:Abp.Events.Bus.Entities.EntityEventData`1.Entity">
            <summary>
            Related entity with this event.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.Entities.EntityChangedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Changed entity in this event</param>
        </member>
        <member name="T:Abp.Events.Bus.Entities.EntityChangedEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Entities.IEntityChangedEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Entities.NullEntityChangedEventHelper">
            <summary>
            Null-object implementation of <see cref="T:Abp.Events.Bus.Entities.IEntityChangedEventHelper"/>.
            </summary>
        </member>
        <member name="P:Abp.Events.Bus.Entities.NullEntityChangedEventHelper.Instance">
            <summary>
            Gets single instance of <see cref="T:Abp.Events.Bus.NullEventBus"/> class.
            </summary>
        </member>
        <member name="T:Abp.IShouldInitialize">
            <summary>
            Defines interface for objects those should be Initialized before using it.
            If the object resolved using dependency injection, <see cref="M:Castle.Core.IInitializable.Initialize"/>
            method is automatically called just after creation of the object.
            </summary>
        </member>
        <member name="T:Abp.Localization.Sources.LocalizationSourceExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Localization.Sources.ILocalizationSource"/>.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.LocalizationSourceExtensions.GetString(Abp.Localization.Sources.ILocalizationSource,System.String,System.Object[])">
            <summary>
            Get a localized string by formatting string.
            </summary>
            <param name="source">Localization source</param>
            <param name="name">Key name</param>
            <param name="args">Format arguments</param>
            <returns>Formatted and localized string</returns>
        </member>
        <member name="M:Abp.Localization.Sources.LocalizationSourceExtensions.GetString(Abp.Localization.Sources.ILocalizationSource,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Get a localized string in given language by formatting string.
            </summary>
            <param name="source">Localization source</param>
            <param name="name">Key name</param>
            <param name="culture">Culture</param>
            <param name="args">Format arguments</param>
            <returns>Formatted and localized string</returns>
        </member>
        <member name="T:Abp.Localization.Dictionaries.Xml.XmlEmbeddedFileLocalizationDictionaryProvider">
            <summary>
            Provides localization dictionaries from XML files embedded into an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Abp.Localization.Dictionaries.Xml.XmlEmbeddedFileLocalizationDictionaryProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Localization.Dictionaries.Xml.XmlEmbeddedFileLocalizationDictionaryProvider"/> object.
            </summary>
            <param name="assembly">Assembly that contains embedded xml files</param>
            <param name="rootNamespace">Namespace of the embedded xml dictionary files</param>
        </member>
        <member name="T:Abp.Localization.Dictionaries.Xml.XmlFileLocalizationDictionaryProvider">
            <summary>
            Provides localization dictionaries from XML files in a directory.
            </summary>
        </member>
        <member name="M:Abp.Localization.Dictionaries.Xml.XmlFileLocalizationDictionaryProvider.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Abp.Localization.Dictionaries.Xml.XmlFileLocalizationDictionaryProvider"/>.
            </summary>
            <param name="directoryPath">Path of the dictionary that contains all related XML files</param>
        </member>
        <member name="T:Abp.Net.Mail.EmailSettingNames">
            <summary>
            Declares names of the settings defined by <see cref="T:Abp.Net.Mail.EmailSettingProvider"/>.
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.DefaultFromAddress">
            <summary>
            Abp.Net.Mail.DefaultFromAddress
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.DefaultFromDisplayName">
            <summary>
            Abp.Net.Mail.DefaultFromDisplayName
            </summary>
        </member>
        <member name="T:Abp.Net.Mail.EmailSettingNames.Smtp">
            <summary>
            SMTP related email settings.
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.Smtp.Host">
            <summary>
            Abp.Net.Mail.Smtp.Host
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.Smtp.Port">
            <summary>
            Abp.Net.Mail.Smtp.Port
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.Smtp.UserName">
            <summary>
            Abp.Net.Mail.Smtp.UserName
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.Smtp.Password">
            <summary>
            Abp.Net.Mail.Smtp.Password
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.Smtp.Domain">
            <summary>
            Abp.Net.Mail.Smtp.Domain
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.Smtp.EnableSsl">
            <summary>
            Abp.Net.Mail.Smtp.EnableSsl
            </summary>
        </member>
        <member name="F:Abp.Net.Mail.EmailSettingNames.Smtp.UseDefaultCredentials">
            <summary>
            Abp.Net.Mail.Smtp.UseDefaultCredentials
            </summary>
        </member>
        <member name="T:Abp.Net.Mail.EmailSettingProvider">
            <summary>
            Defines settings to send emails.
            <see cref="T:Abp.Net.Mail.EmailSettingNames"/> for all available configurations.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingProvider">
            <summary>
            Inherit this class to define settings for a module/application.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingProvider.GetSettingDefinitions(Abp.Configuration.SettingDefinitionProviderContext)">
            <summary>
            Gets all setting definitions provided by this provider.
            </summary>
            <returns>List of settings</returns>
        </member>
        <member name="T:Abp.Net.Mail.EmailSenderConfiguration">
            <summary>
            Implementation of <see cref="T:Abp.Net.Mail.IEmailSenderConfiguration"/> that reads settings
            from <see cref="T:Abp.Configuration.ISettingManager"/>.
            </summary>
        </member>
        <member name="T:Abp.Net.Mail.IEmailSenderConfiguration">
            <summary>
            Defines configurations used while sending emails.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.IEmailSenderConfiguration.DefaultFromAddress">
            <summary>
            Default from address.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.IEmailSenderConfiguration.DefaultFromDisplayName">
            <summary>
            Default display name.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.EmailSenderConfiguration.#ctor(Abp.Configuration.ISettingManager)">
            <summary>
            Creates a new <see cref="T:Abp.Net.Mail.EmailSenderConfiguration"/>.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.EmailSenderConfiguration.GetNotEmptySettingValue(System.String)">
            <summary>
            Gets a setting value by checking. Throws <see cref="T:Abp.AbpException"/> if it's null or empty.
            </summary>
            <param name="name">Name of the setting</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="T:Abp.Net.Mail.EmailSenderBase">
            <summary>
            This class can be used as base to implement <see cref="T:Abp.Net.Mail.IEmailSender"/>.
            </summary>
        </member>
        <member name="T:Abp.Net.Mail.IEmailSender">
            <summary>
            This service can be used simply sending emails.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.IEmailSender.SendAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.IEmailSender.Send(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.IEmailSender.SendAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.IEmailSender.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.IEmailSender.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
            <param name="mail">Mail to be sent</param>
            <param name="normalize">
            Should normalize email?
            If true, it sets sender address/name if it's not set before and makes mail encoding UTF-8. 
            </param>
        </member>
        <member name="M:Abp.Net.Mail.IEmailSender.SendAsync(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
            <param name="mail">Mail to be sent</param>
            <param name="normalize">
            Should normalize email?
            If true, it sets sender address/name if it's not set before and makes mail encoding UTF-8. 
            </param>
        </member>
        <member name="M:Abp.Net.Mail.EmailSenderBase.#ctor(Abp.Net.Mail.IEmailSenderConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:Abp.Net.Mail.EmailSenderBase.SendEmailAsync(System.Net.Mail.MailMessage)">
            <summary>
            Should implement this method to send email in derived classes.
            </summary>
            <param name="mail">Mail to be sent</param>
        </member>
        <member name="M:Abp.Net.Mail.EmailSenderBase.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            Should implement this method to send email in derived classes.
            </summary>
            <param name="mail">Mail to be sent</param>
        </member>
        <member name="M:Abp.Net.Mail.EmailSenderBase.NormalizeMail(System.Net.Mail.MailMessage)">
            <summary>
            Normalizes given email.
            Fills <see cref="P:System.Net.Mail.MailMessage.From"/> if it's not filled before.
            Sets encodings to UTF8 if they are not set before.
            </summary>
            <param name="mail">Mail to be normalized</param>
        </member>
        <member name="T:Abp.Net.Mail.NullEmailSender">
            <summary>
            This class is an implementation of <see cref="T:Abp.Net.Mail.IEmailSender"/> as similar to null pattern.
            It does not send emails but logs them.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.NullEmailSender.#ctor(Abp.Net.Mail.IEmailSenderConfiguration)">
            <summary>
            Creates a new <see cref="T:Abp.Net.Mail.NullEmailSender"/> object.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="T:Abp.Net.Mail.Smtp.ISmtpEmailSender">
            <summary>
            Used to send emails over SMTP.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.Smtp.ISmtpEmailSender.BuildClient">
            <summary>
            Creates and configures new <see cref="T:System.Net.Mail.SmtpClient"/> object to send emails. 
            </summary>
            <returns>
            An <see cref="T:System.Net.Mail.SmtpClient"/> object that is ready to send emails.
            </returns>
        </member>
        <member name="T:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration">
            <summary>
            Defines configurations to used by <see cref="T:System.Net.Mail.SmtpClient"/> object.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Host">
            <summary>
            SMTP Host name/IP.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Port">
            <summary>
            SMTP Port.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.UserName">
            <summary>
            User name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Password">
            <summary>
            Password to login to SMTP server.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Domain">
            <summary>
            Domain name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.EnableSsl">
            <summary>
            Is SSL enabled?
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.UseDefaultCredentials">
            <summary>
            Use default credentials?
            </summary>
        </member>
        <member name="T:Abp.Net.Mail.Smtp.SmtpEmailSender">
            <summary>
            Used to send emails over SMTP.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.Smtp.SmtpEmailSender.#ctor(Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration)">
            <summary>
            Creates a new <see cref="T:Abp.Net.Mail.Smtp.SmtpEmailSender"/>.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="T:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration">
            <summary>
            Implementation of <see cref="T:Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration"/> that reads settings
            from <see cref="T:Abp.Configuration.ISettingManager"/>.
            </summary>
        </member>
        <member name="M:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.#ctor(Abp.Configuration.ISettingManager)">
            <summary>
            Creates a new <see cref="T:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration"/>.
            </summary>
            <param name="settingManager">Setting manager</param>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Host">
            <summary>
            SMTP Host name/IP.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Port">
            <summary>
            SMTP Port.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.UserName">
            <summary>
            User name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Password">
            <summary>
            Password to login to SMTP server.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Domain">
            <summary>
            Domain name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.EnableSsl">
            <summary>
            Is SSL enabled?
            </summary>
        </member>
        <member name="P:Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration.UseDefaultCredentials">
            <summary>
            Use default credentials?
            </summary>
        </member>
        <member name="T:Abp.RandomHelper">
            <summary>
            A shortcut to use <see cref="T:System.Random"/> class.
            Also provides some useful methods.
            </summary>
        </member>
        <member name="M:Abp.RandomHelper.GetRandom(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. 
            If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Abp.RandomHelper.GetRandom(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values ordinarily includes zero but not maxValue. 
            However, if maxValue equals zero, maxValue is returned.
            </returns>
        </member>
        <member name="M:Abp.RandomHelper.GetRandom">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:Abp.RandomHelper.GetRandomOf``1(``0[])">
            <summary>
            Gets random of given objects.
            </summary>
            <typeparam name="T">Type of the objects</typeparam>
            <param name="objs">List of object to select a random one</param>
            <returns></returns>
        </member>
        <member name="T:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1">
            <summary>
            This class is used to store items to a thread safe and generic cache in a simple manner.
            It uses async pattern.
            </summary>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="F:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1._cache">
            <summary>
            The real cache object to store items.
            </summary>
        </member>
        <member name="F:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1._defaultCacheItemPolicy">
            <summary>
            <see cref="F:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1._defaultCacheItemPolicy"/> is used if no policy is specified.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object to store items</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object</param>
            <param name="slidingExpiration">Default cache policy as sliding expiration</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object</param>
            <param name="absoluteExpiration">Default cache policy as absolute expiration</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object</param>
            <param name="defaultCacheItemPolicy">Default cache policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.Get(System.String)">
            <summary>
            Gets an item from cache if exists, or null.
            </summary>
            <param name="key">Key to get item</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.GetAsync(System.String,System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.GetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="slidingExpiration">Sliding expiration policy</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.GetAsync(System.String,System.DateTimeOffset,System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="absoluteExpiration">Absolute expiration policy</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.GetAsync(System.String,System.Func{System.Runtime.Caching.CacheItemPolicy},System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="cacheItemPolicy">Cache policy creation method (called only if item is being added to the cache)</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.Set(System.String,`0)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.Set(System.String,`0,System.TimeSpan)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
            <param name="slidingExpiration">Sliding expiration policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.Set(System.String,`0,System.DateTimeOffset)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
            <param name="absoluteExpiration">Absolute expiration policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.Set(System.String,`0,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
            <param name="cacheItemPolicy">Cache item policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.AsyncThreadSafeObjectCache`1.Remove(System.String)">
            <summary>
            Removes an item from the cache (if it exists).
            </summary>
            <param name="key">Key of the item</param>
            <returns>Removed item (if it exists)</returns>
        </member>
        <member name="T:Abp.Runtime.Session.AbpSessionExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Runtime.Session.IAbpSession"/>.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Session.AbpSessionExtensions.GetUserId(Abp.Runtime.Session.IAbpSession)">
            <summary>
            Gets current User's Id.
            Throws <see cref="T:Abp.AbpException"/> if <see cref="P:Abp.Runtime.Session.IAbpSession.UserId"/> is null.
            </summary>
            <param name="session">Session object.</param>
            <returns>Current User's Id.</returns>
        </member>
        <member name="M:Abp.Runtime.Session.AbpSessionExtensions.GetTenantId(Abp.Runtime.Session.IAbpSession)">
            <summary>
            Gets current Tenant's Id.
            Throws <see cref="T:Abp.AbpException"/> if <see cref="P:Abp.Runtime.Session.IAbpSession.TenantId"/> is null.
            </summary>
            <param name="session">Session object.</param>
            <returns>Current Tenant's Id.</returns>
            <exception cref="T:Abp.AbpException"></exception>
        </member>
        <member name="T:Abp.Extensions.DateTimeRangeExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Timing.IDateTimeRange"/>.
            </summary>
        </member>
        <member name="M:Abp.Extensions.DateTimeRangeExtensions.SetTo(Abp.Timing.IDateTimeRange,Abp.Timing.IDateTimeRange)">
            <summary>
            Sets date range to given target.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Abp.Extensions.DateTimeRangeExtensions.SetFrom(Abp.Timing.IDateTimeRange,Abp.Timing.IDateTimeRange)">
            <summary>
            Sets date range from given source.
            </summary>
        </member>
        <member name="T:Abp.Dependency.IConventionalRegistrationContext">
            <summary>
            Used to pass needed objects on conventional registration process.
            </summary>
        </member>
        <member name="P:Abp.Dependency.IConventionalRegistrationContext.Assembly">
            <summary>
            Gets the registering Assembly.
            </summary>
        </member>
        <member name="P:Abp.Dependency.IConventionalRegistrationContext.IocManager">
            <summary>
            Reference to the IOC Container to register types.
            </summary>
        </member>
        <member name="P:Abp.Dependency.IConventionalRegistrationContext.Config">
            <summary>
            Registration configuration.
            </summary>
        </member>
        <member name="T:Abp.Dependency.IDisposableDependencyObjectWrapper">
            <summary>
            This interface is used to wrap an object that is resolved from IOC container.
            It inherits <see cref="T:System.IDisposable"/>, so resolved object can be easily released.
            In <see cref="M:System.IDisposable.Dispose"/> method, <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/> is called to dispose the object.
            This is non-generic version of <see cref="T:Abp.Dependency.IDisposableDependencyObjectWrapper`1"/> interface.
            </summary>
        </member>
        <member name="T:Abp.Dependency.IDisposableDependencyObjectWrapper`1">
            <summary>
            This interface is used to wrap an object that is resolved from IOC container.
            It inherits <see cref="T:System.IDisposable"/>, so resolved object can be easily released.
            In <see cref="M:System.IDisposable.Dispose"/> method, <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/> is called to dispose the object.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
        </member>
        <member name="P:Abp.Dependency.IDisposableDependencyObjectWrapper`1.Object">
            <summary>
            The resolved object.
            </summary>
        </member>
        <member name="T:Abp.Dependency.IIocManager">
            <summary>
            This interface is used to directly perform dependency injection tasks.
            </summary>
        </member>
        <member name="T:Abp.Dependency.IIocRegistrar">
            <summary>
            Define interface for classes those are used to register dependencies.
            </summary>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.AddConventionalRegistrar(Abp.Dependency.IConventionalDependencyRegistrar)">
            <summary>
            Adds a dependency registrar for conventional registration.
            </summary>
            <param name="registrar">dependency registrar</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.RegisterAssemblyByConvention(System.Reflection.Assembly)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Abp.Dependency.IocManager.AddConventionalRegistrar(Abp.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.RegisterAssemblyByConvention(System.Reflection.Assembly,Abp.Dependency.ConventionalRegistrationConfig)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Abp.Dependency.IocManager.AddConventionalRegistrar(Abp.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
            <param name="config">Additional configuration</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.Register``1(Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <typeparam name="T">Type of the class</typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.Register(System.Type,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <param name="type">Type of the class</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.Register``2(Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation.
            </summary>
            <typeparam name="TType">Registering type</typeparam>
            <typeparam name="TImpl">The type that implements <see cref="!:TType"/></typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.Register(System.Type,System.Type,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation.
            </summary>
            <param name="type">Type of the class</param>
            <param name="impl">The type that implements <paramref name="type"/></param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Abp.Dependency.IIocRegistrar.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="TType">Type to check</typeparam>
        </member>
        <member name="T:Abp.Dependency.IIocResolver">
            <summary>
            Define interface for classes those are used to resolve dependencies.
            </summary>
        </member>
        <member name="M:Abp.Dependency.IIocResolver.Resolve``1">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <returns>The object instance</returns>
        </member>
        <member name="M:Abp.Dependency.IIocResolver.Resolve``1(System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Abp.Dependency.IIocResolver.Resolve(System.Type)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Abp.Dependency.IIocResolver.Resolve(System.Type,System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Abp.Dependency.IIocResolver.Release(System.Object)">
            <summary>
            Releases a pre-resolved object. See Resolve methods.
            </summary>
            <param name="obj">Object to be released</param>
        </member>
        <member name="M:Abp.Dependency.IIocResolver.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Abp.Dependency.IIocResolver.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="M:Abp.Dependency.IIocManager.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Abp.Dependency.IIocManager.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="P:Abp.Dependency.IIocManager.IocContainer">
            <summary>
            Reference to the Castle Windsor Container.
            </summary>
        </member>
        <member name="T:Abp.Dependency.IocResolverExtensions">
            <summary>
            Extension methods to <see cref="T:Abp.Dependency.IIocResolver"/> interface.
            </summary>
        </member>
        <member name="M:Abp.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Abp.Dependency.IIocResolver)">
            <summary>
            Gets an <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <returns>The instance object wrapped by <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Abp.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Abp.Dependency.IIocResolver,System.Type)">
            <summary>
            Gets an <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible <see cref="!:T"/>.</param>
            <returns>The instance object wrapped by <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Abp.Dependency.IocResolverExtensions.ResolveAsDisposable(Abp.Dependency.IIocResolver,System.Type)">
            <summary>
            Gets an <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible to <see cref="T:System.IDisposable"/>.</param>
            <returns>The instance object wrapped by <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Abp.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Abp.Dependency.IIocResolver,System.Object)">
            <summary>
            Gets an <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object wrapped by <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Abp.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Abp.Dependency.IIocResolver,System.Type,System.Object)">
            <summary>
            Gets an <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible <see cref="!:T"/>.</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object wrapped by <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Abp.Dependency.IocResolverExtensions.ResolveAsDisposable(Abp.Dependency.IIocResolver,System.Type,System.Object)">
            <summary>
            Gets an <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible to <see cref="T:System.IDisposable"/>.</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object wrapped by <see cref="T:Abp.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Abp.Dependency.IocResolverExtensions.Using``1(Abp.Dependency.IIocResolver,System.Action{``0})">
            <summary>
            This method can be used to resolve and release an object automatically.
            You can use the object in <see cref="!:action"/>.
            </summary> 
            <typeparam name="T">Type of the object to use</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="action">An action that can use the resolved object</param>
        </member>
        <member name="T:Abp.Dependency.DependencyLifeStyle">
            <summary>
            Lifestyles of types used in dependency injection system.
            </summary>
        </member>
        <member name="F:Abp.Dependency.DependencyLifeStyle.Singleton">
            <summary>
            Singleton object. Created a single object on first resolving
            and same instance is used for subsequent resolves.
            </summary>
        </member>
        <member name="F:Abp.Dependency.DependencyLifeStyle.Transient">
            <summary>
            Transient object. Created one object for every resolving.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.FullAuditedEntity`2">
            <summary>
            Implements <see cref="T:Abp.Domain.Entities.Auditing.IFullAudited`1"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.AuditedEntity`2">
            <summary>
            This class can be used to simplify implementing <see cref="T:Abp.Domain.Entities.Auditing.IAudited`1"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Abp.Domain.Entities.Auditing.IAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.ICreationAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Abp.Domain.Entities.Auditing.ICreationAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.ICreationAudited`1.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IModificationAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Abp.Domain.Entities.Auditing.IModificationAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.IModificationAudited`1.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.AuditedEntity`2.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.AuditedEntity`2.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IFullAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Abp.Domain.Entities.Auditing.IFullAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.IDeletionAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Abp.Domain.Entities.Auditing.IDeletionAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.IDeletionAudited`1.DeleterUser">
            <summary>
            Reference to the deleter user of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.FullAuditedEntity`2.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.FullAuditedEntity`2.DeleterUser">
            <summary>
            Reference to the deleter user of this entity.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.FullAuditedEntity`2.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.FullAuditedEntity`2.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.IMayHaveTenant">
            <summary>
            Implement this interface for an entity which may optionally have TenantId.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.IMayHaveTenant.TenantId">
            <summary>
            TenantId of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.IMustHaveTenant">
            <summary>
            Implement this interface for an entity which must have TenantId.
            </summary>
        </member>
        <member name="P:Abp.Domain.Entities.IMustHaveTenant.TenantId">
            <summary>
            TenantId of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Services.DomainService">
            <summary>
            This class can be used as a base class for domain services. 
            </summary>
        </member>
        <member name="T:Abp.Domain.Services.IDomainService">
            <summary>
            This interface must be implemented by all domain services to identify them by convention.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Exceptions.AbpHandledExceptionData">
            <summary>
            This type of events are used to notify for exceptions handled by ABP infrastructure.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Exceptions.ExceptionData">
            <summary>
            This type of events can be used to notify for an exception.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.Exceptions.ExceptionData.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="exception">Exception object</param>
        </member>
        <member name="P:Abp.Events.Bus.Exceptions.ExceptionData.Exception">
            <summary>
            Exception object.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.Exceptions.AbpHandledExceptionData.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="exception">Exception object</param>
        </member>
        <member name="T:Abp.Extensions.ComparableExtensions">
            <summary>
            Extension methods for <see cref="T:System.IComparable`1"/>.
            </summary>
        </member>
        <member name="M:Abp.Extensions.ComparableExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            Checks a value is between a minimum and maximum value.
            </summary>
            <param name="value">The value to be checked</param>
            <param name="minInclusiveValue">Minimum (inclusive) value</param>
            <param name="maxInclusiveValue">Maximum (inclusive) value</param>
        </member>
        <member name="T:Abp.Extensions.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="T:Abp.Extensions.DayOfWeekExtensions">
            <summary>
            Extension methods for <see cref="T:Abp.Extensions.DayOfWeekExtensions"/>.
            </summary>
        </member>
        <member name="M:Abp.Extensions.DayOfWeekExtensions.IsWeekend(System.DayOfWeek)">
            <summary>
            Check if given <see cref="T:System.DayOfWeek"/> value is weekend.
            </summary>
        </member>
        <member name="M:Abp.Extensions.DayOfWeekExtensions.IsWeekday(System.DayOfWeek)">
            <summary>
            Check if given <see cref="T:System.DayOfWeek"/> value is weekday.
            </summary>
        </member>
        <member name="T:Abp.Collections.Extensions.EnumerableExtensions">
            <summary> 
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Abp.Collections.Extensions.EnumerableExtensions.JoinAsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type System.String, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:Abp.Collections.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the objects to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <typeparam name="T">The type of the members of values.</typeparam>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:Abp.Collections.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <see cref="!:condition"/></returns>
        </member>
        <member name="M:Abp.Collections.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <see cref="!:condition"/></returns>
        </member>
        <member name="T:Abp.Extensions.EventHandlerExtensions">
            <summary>
            Extension methods for <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="M:Abp.Extensions.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
        </member>
        <member name="M:Abp.Extensions.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Abp.Extensions.EventHandlerExtensions.InvokeSafely``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <typeparam name="TEventArgs">Type of the <see cref="T:System.EventArgs"/></typeparam>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:Abp.Linq.Extensions.QueryableExtensions">
            <summary>
            Some useful extension methods for <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:Abp.Linq.Extensions.QueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
        </member>
        <member name="M:Abp.Linq.Extensions.QueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},Abp.Application.Services.Dto.IPagedResultRequest)">
            <summary>
            Used for paging with an <see cref="T:Abp.Application.Services.Dto.IPagedResultRequest"/> object.
            </summary>
            <param name="query">Queryable to apply paging</param>
            <param name="pagedResultRequest">An object implements <see cref="T:Abp.Application.Services.Dto.IPagedResultRequest"/> interface</param>
        </member>
        <member name="M:Abp.Linq.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <see cref="!:condition"/></returns>
        </member>
        <member name="M:Abp.Linq.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <see cref="!:condition"/></returns>
        </member>
        <member name="T:Abp.Localization.FixedLocalizableString">
            <summary>
            A class that gets the same string on every localization.
            </summary>
        </member>
        <member name="T:Abp.Localization.ILocalizableString">
            <summary>
            Represents a string that can be localized when needed.
            </summary>
        </member>
        <member name="M:Abp.Localization.ILocalizableString.Localize">
            <summary>
            Localizes the string in current culture.
            </summary>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.ILocalizableString.Localize(System.Globalization.CultureInfo)">
            <summary>
            Localizes the string in given culture.
            </summary>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.FixedLocalizableString.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Abp.Localization.FixedLocalizableString"/>.
            </summary>
            <param name="fixedString">
            The fixed string.
            Whenever Localize methods called, this string is returned.
            </param>
        </member>
        <member name="M:Abp.Localization.FixedLocalizableString.Localize">
            <summary>
            Gets the <see cref="P:Abp.Localization.FixedLocalizableString.FixedString"/> always.
            </summary>
        </member>
        <member name="M:Abp.Localization.FixedLocalizableString.Localize(System.Globalization.CultureInfo)">
            <summary>
            Gets the <see cref="P:Abp.Localization.FixedLocalizableString.FixedString"/> always.
            </summary>
        </member>
        <member name="P:Abp.Localization.FixedLocalizableString.FixedString">
            <summary>
            The fixed string.
            Whenever Localize methods called, this string is returned.
            </summary>
        </member>
        <member name="T:Abp.Localization.LanguageInfo">
            <summary>
            Represents an available language for the application.
            </summary>
        </member>
        <member name="M:Abp.Localization.LanguageInfo.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Abp.Localization.LanguageInfo"/> object.
            </summary>
            <param name="name">
            Code name of the language.
            It should be valid culture code.
            Ex: "en-US" for American English, "tr-TR" for Turkey Turkish.
            </param>
            <param name="displayName">
            Display name of the language in it's original language.
            Ex: "English" for English, "Türkçe" for Turkish.
            </param>
            <param name="icon">An icon can be set to display on the UI</param>
            <param name="isDefault">Is this the default language?</param>
        </member>
        <member name="P:Abp.Localization.LanguageInfo.Name">
            <summary>
            Code name of the language.
            It should be valid culture code.
            Ex: "en-US" for American English, "tr-TR" for Turkey Turkish.
            </summary>
        </member>
        <member name="P:Abp.Localization.LanguageInfo.DisplayName">
            <summary>
            Display name of the language in it's original language.
            Ex: "English" for English, "Türkçe" for Turkish.
            </summary>
        </member>
        <member name="P:Abp.Localization.LanguageInfo.Icon">
            <summary>
            An icon can be set to display on the UI.
            </summary>
        </member>
        <member name="P:Abp.Localization.LanguageInfo.IsDefault">
            <summary>
            Is this the default language?
            </summary>
        </member>
        <member name="T:Abp.Localization.ILocalizationManager">
            <summary>
            This interface is used to manage localization system.
            </summary>
        </member>
        <member name="M:Abp.Localization.ILocalizationManager.GetAllLanguages">
            <summary>
            Gets all available languages for the application.
            </summary>
            <returns>List of languages</returns>
        </member>
        <member name="M:Abp.Localization.ILocalizationManager.GetSource(System.String)">
            <summary>
            Gets a localization source with name.
            </summary>
            <param name="name">Unique name of the localization source</param>
            <returns>The localization source</returns>
        </member>
        <member name="M:Abp.Localization.ILocalizationManager.GetAllSources">
            <summary>
            Gets all registered localization sources.
            </summary>
            <returns>List of sources</returns>
        </member>
        <member name="M:Abp.Localization.ILocalizationManager.GetString(System.String,System.String)">
            <summary>
            Gets a localized string in current language.
            </summary>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.ILocalizationManager.GetString(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized string in specified language.
            </summary>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="P:Abp.Localization.ILocalizationManager.CurrentLanguage">
            <summary>
            Gets current language for the application.
            </summary>
        </member>
        <member name="P:Abp.Localization.NullLocalizationManager.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Abp.Localization.Sources.NullLocalizationSource">
            <summary>
            Null object pattern for <see cref="T:Abp.Localization.Sources.ILocalizationSource"/>.
            </summary>
        </member>
        <member name="P:Abp.Localization.Sources.NullLocalizationSource.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Abp.Modules.DependsOnAttribute">
            <summary>
            Used to define dependencies of an ABP module to other modules.
            It should be used for a class derived from <see cref="T:Abp.Modules.AbpModule"/>.
            </summary>
        </member>
        <member name="M:Abp.Modules.DependsOnAttribute.#ctor(System.Type[])">
            <summary>
            Used to define dependencies of an ABP module to other modules.
            </summary>
            <param name="dependedModuleTypes">Types of depended modules</param>
        </member>
        <member name="P:Abp.Modules.DependsOnAttribute.DependedModuleTypes">
            <summary>
            Types of depended modules.
            </summary>
        </member>
        <member name="T:Abp.Reflection.CurrentDomainAssemblyFinder">
            <summary>
            Default implementation of <see cref="T:Abp.Reflection.IAssemblyFinder"/>.
            If gets assemblies from current domain.
            </summary>
        </member>
        <member name="T:Abp.Reflection.IAssemblyFinder">
            <summary>
            This interface is used to get all assemblies to investigate special classes
            such as ABP modules.
            </summary>
        </member>
        <member name="M:Abp.Reflection.IAssemblyFinder.GetAllAssemblies">
            <summary>
            This method should return all assemblies used by application.
            </summary>
            <returns>List of assemblies</returns>
        </member>
        <member name="P:Abp.Reflection.CurrentDomainAssemblyFinder.Instance">
            <summary>
            Gets Singleton instance of <see cref="T:Abp.Reflection.CurrentDomainAssemblyFinder"/>.
            </summary>
        </member>
        <member name="T:Abp.Modules.IModuleFinder">
            <summary>
            This interface is responsible to find all modules (derived from <see cref="T:Abp.Modules.AbpModule"/>)
            in the application.
            </summary>
        </member>
        <member name="M:Abp.Modules.IModuleFinder.FindAll">
            <summary>
            Finds all modules.
            </summary>
            <returns>List of modules</returns>
        </member>
        <member name="T:Abp.Reflection.ReflectionHelper">
            <summary>
            Defines helper methods for reflection.
            </summary>
        </member>
        <member name="M:Abp.Reflection.ReflectionHelper.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Checks whether <paramref name="givenType"/> implements/inherits <paramref name="genericType"/>.
            </summary>
            <param name="givenType">Type to check</param>
            <param name="genericType">Generic type</param>
        </member>
        <member name="M:Abp.Reflection.ReflectionHelper.GetAttributesOfMemberAndDeclaringType``1(System.Reflection.MemberInfo)">
            <summary>
            Gets a list of attributes defined for a class member and it's declaring type including inherited attributes.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
        </member>
        <member name="T:Abp.Resources.Embedded.EmbeddedResourceInfo">
            <summary>
            Stores needed information of an embedded resource.
            </summary>
        </member>
        <member name="P:Abp.Resources.Embedded.EmbeddedResourceInfo.Content">
            <summary>
            Content of the resource file.
            </summary>
        </member>
        <member name="P:Abp.Resources.Embedded.EmbeddedResourceInfo.Assembly">
            <summary>
            The assembly that contains the resource.
            </summary>
        </member>
        <member name="T:Abp.Resources.Embedded.EmbeddedResourceManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Abp.Resources.Embedded.IEmbeddedResourceManager">
            <summary>
            Provides infrastructure to use any type of resources (files) embedded into assemblies.
            </summary>
        </member>
        <member name="M:Abp.Resources.Embedded.IEmbeddedResourceManager.ExposeResources(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Makes possible to expose all files in a folder (and subfolders recursively).
            </summary>
            <param name="rootPath">
            Root folder path to be seen by clients.
            This is an arbitrary value with any deep.
            </param>
            <param name="assembly">The assembly contains resources.</param>
            <param name="resourceNamespace">Namespace in the <paramref name="assembly"/> that matches to the root path</param>
        </member>
        <member name="M:Abp.Resources.Embedded.IEmbeddedResourceManager.GetResource(System.String)">
            <summary>
            Used to get an embedded resource file.
            </summary>
            <param name="fullResourcePath">Full path of the resource</param>
            <returns>The resource</returns>
        </member>
        <member name="M:Abp.Resources.Embedded.EmbeddedResourceManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Resources.Embedded.EmbeddedResourceManager.ExposeResources(System.String,System.Reflection.Assembly,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Resources.Embedded.EmbeddedResourceManager.GetResource(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Abp.Resources.Embedded.EmbeddedResourcePathInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Abp.Resources.Embedded.EmbeddedResourcePathInfo.#ctor(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="assembly"></param>
            <param name="resourceNamespace"></param>
        </member>
        <member name="P:Abp.Resources.Embedded.EmbeddedResourcePathInfo.Assembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Abp.Resources.Embedded.EmbeddedResourcePathInfo.ResourceNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="T:Abp.Runtime.Session.IAbpSession">
            <summary>
            Defines some session information that can be useful for applications.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Session.IAbpSession.UserId">
            <summary>
            Gets current UserId or null.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Session.IAbpSession.TenantId">
            <summary>
            Gets current TenantId or null.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Session.IAbpSession.MultiTenancySide">
            <summary>
            Gets current multi-tenancy side.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Session.IAbpSession.ImpersonatorUserId">
            <summary>
            UserId of the impersonator.
            This is filled if a user is performing actions behalf of the <see cref="P:Abp.Runtime.Session.IAbpSession.UserId"/>.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Session.IAbpSession.ImpersonatorTenantId">
            <summary>
            TenantId of the impersonator.
            This is filled if a user with <see cref="P:Abp.Runtime.Session.IAbpSession.ImpersonatorUserId"/> performing actions behalf of the <see cref="P:Abp.Runtime.Session.IAbpSession.UserId"/>.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Session.NullAbpSession">
            <summary>
            Implements null object pattern for <see cref="T:Abp.Runtime.Session.IAbpSession"/>.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Session.NullAbpSession.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Abp.Runtime.Session.NullAbpSession.UserId">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Runtime.Session.NullAbpSession.TenantId">
            <inheritdoc/>
        </member>
        <member name="T:Abp.Configuration.ISettingDefinitionManager">
            <summary>
            Defines setting definition manager.
            </summary>
        </member>
        <member name="M:Abp.Configuration.ISettingDefinitionManager.GetSettingDefinition(System.String)">
            <summary>
            Gets the <see cref="T:Abp.Configuration.SettingDefinition"/> object with given unique name.
            Throws exception if can not find the setting.
            </summary>
            <param name="name">Unique name of the setting</param>
            <returns>The <see cref="T:Abp.Configuration.SettingDefinition"/> object.</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingDefinitionManager.GetAllSettingDefinitions">
            <summary>
            Gets a list of all setting definitions.
            </summary>
            <returns>All settings.</returns>
        </member>
        <member name="T:Abp.Configuration.ISettingManager">
            <summary>
            This is the main interface that must be implemented to be able to load/change values of settings.
            </summary>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetSettingValueAsync(System.String)">
            <summary>
            Gets current value of a setting.
            It gets the setting value, overwritten by application, current tenant and current user if exists.
            </summary>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetSettingValueForApplicationAsync(System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetSettingValueForTenantAsync(System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetSettingValueForUserAsync(System.String,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetAllSettingValuesAsync">
            <summary>
            Gets current values of all settings.
            It gets all setting values, overwritten by application, current tenant (if exists) and the current user (if exists).
            </summary>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetAllSettingValuesAsync(Abp.Configuration.SettingScopes)">
            <summary>
            Gets current values of all settings.
            It gets default values of all settings then overwrites by given scopes.
            </summary>
            <param name="scopes">One or more scope to overwrite</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetAllSettingValuesForApplicationAsync">
            <summary>
            Gets a list of all setting values specified for the application.
            It returns only settings those are explicitly set for the application.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Abp.Configuration.ISettingManager.GetAllSettingValuesAsync"/> method.
            </summary>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetAllSettingValuesForTenantAsync(System.Int32)">
            <summary>
            Gets a list of all setting values specified for a tenant.
            It returns only settings those are explicitly set for the tenant.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Abp.Configuration.ISettingManager.GetAllSettingValuesAsync"/> method.
            </summary>
            <param name="tenantId">Tenant to get settings</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.GetAllSettingValuesForUserAsync(System.Int64)">
            <summary>
            Gets a list of all setting values specified for a user.
            It returns only settings those are explicitly set for the user.
            If a setting's value is not set for the user (for example if user uses the default value), it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Abp.Configuration.ISettingManager.GetAllSettingValuesAsync"/> method.
            </summary>
            <param name="userId">User to get settings</param>
            <returns>All settings of the user</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.ChangeSettingForApplicationAsync(System.String,System.String)">
            <summary>
            Changes setting for the application level.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.ChangeSettingForTenantAsync(System.Int32,System.String,System.String)">
            <summary>
            Changes setting for a Tenant.
            </summary>
            <param name="tenantId">TenantId</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Abp.Configuration.ISettingManager.ChangeSettingForUserAsync(System.Int64,System.String,System.String)">
            <summary>
            Changes setting for a user.
            </summary>
            <param name="userId">UserId</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="T:Abp.Configuration.ISettingStore">
            <summary>
            This interface is used to get/set settings from/to a data source (database).
            </summary>
        </member>
        <member name="M:Abp.Configuration.ISettingStore.GetSettingOrNullAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String)">
            <summary>
            Gets a setting or null.
            </summary>
            <param name="tenantId">TenantId or null</param>
            <param name="userId">UserId or null</param>
            <param name="name">Name of the setting</param>
            <returns>Setting object</returns>
        </member>
        <member name="M:Abp.Configuration.ISettingStore.DeleteAsync(Abp.Configuration.SettingInfo)">
            <summary>
            Deletes a setting.
            </summary>
            <param name="setting">Setting to be deleted</param>
        </member>
        <member name="M:Abp.Configuration.ISettingStore.CreateAsync(Abp.Configuration.SettingInfo)">
            <summary>
            Adds a setting.
            </summary>
            <param name="setting">Setting to add</param>
        </member>
        <member name="M:Abp.Configuration.ISettingStore.UpdateAsync(Abp.Configuration.SettingInfo)">
            <summary>
            Update a setting.
            </summary>
            <param name="setting">Setting to add</param>
        </member>
        <member name="M:Abp.Configuration.ISettingStore.GetAllListAsync(System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Gets a list of setting.
            </summary>
            <param name="tenantId">TenantId or null</param>
            <param name="userId">UserId or null</param>
            <returns>List of settings</returns>
        </member>
        <member name="T:Abp.Configuration.DefaultConfigSettingStore">
            <summary>
            Implements default behavior for ISettingStore.
            Only <see cref="M:Abp.Configuration.DefaultConfigSettingStore.GetSettingOrNullAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String)"/> method is implemented and it gets setting's value
            from application's configuration file if exists, or returns null if not.
            </summary>
        </member>
        <member name="M:Abp.Configuration.DefaultConfigSettingStore.DeleteAsync(Abp.Configuration.SettingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.DefaultConfigSettingStore.CreateAsync(Abp.Configuration.SettingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.DefaultConfigSettingStore.UpdateAsync(Abp.Configuration.SettingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.DefaultConfigSettingStore.GetAllListAsync(System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Configuration.DefaultConfigSettingStore.Instance">
            <summary>
            Gets singleton instance.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingDefinition">
            <summary>
            Defines a setting.
            A setting is used to configure and change behavior of the application.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingDefinition.#ctor(System.String,System.String,Abp.Localization.ILocalizableString,Abp.Configuration.SettingDefinitionGroup,Abp.Localization.ILocalizableString,Abp.Configuration.SettingScopes,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates a new <see cref="T:Abp.Configuration.SettingDefinition"/> object.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="defaultValue">Default value of the setting</param>
            <param name="displayName">Display name of the permission</param>
            <param name="group">Group of this setting</param>
            <param name="description">A brief description for this setting</param>
            <param name="scopes">Scopes of this setting. Default value: <see cref="F:Abp.Configuration.SettingScopes.Application"/>.</param>
            <param name="isVisibleToClients">Can clients see this setting and it's value. Default: false</param>
            <param name="isInherited">Is this setting inherited from parent scopes. Default: True.</param>
            <param name="customData">Can be used to store a custom object related to this setting</param>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.DisplayName">
            <summary>
            Display name of the setting.
            This can be used to show setting to the user.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.Description">
            <summary>
            A brief description for this setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.Scopes">
            <summary>
            Scopes of this setting.
            Default value: <see cref="F:Abp.Configuration.SettingScopes.Application"/>.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.IsInherited">
            <summary>
            Is this setting inherited from parent scopes.
            Default: True.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.Group">
            <summary>
            Gets/sets group for this setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.DefaultValue">
            <summary>
            Default value of the setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.IsVisibleToClients">
            <summary>
            Can clients see this setting and it's value.
            It maybe dangerous for some settings to be visible to clients (such as email server password).
            Default: false.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinition.CustomData">
            <summary>
            Can be used to store a custom object related to this setting.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingDefinitionGroup">
            <summary>
            A setting group is used to group some settings togehter.
            A group can be child of another group and can has child groups.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingDefinitionGroup.#ctor(System.String,Abp.Localization.ILocalizableString)">
            <summary>
            Creates a new <see cref="T:Abp.Configuration.SettingDefinitionGroup"/> object.
            </summary>
            <param name="name">Unique name of the setting group</param>
            <param name="displayName">Display name of the setting</param>
        </member>
        <member name="M:Abp.Configuration.SettingDefinitionGroup.AddChild(Abp.Configuration.SettingDefinitionGroup)">
            <summary>
            Adds a <see cref="T:Abp.Configuration.SettingDefinitionGroup"/> as child of this group.
            </summary>
            <param name="child">Child to be added</param>
            <returns>This child group to be able to add more child</returns>
        </member>
        <member name="P:Abp.Configuration.SettingDefinitionGroup.Name">
            <summary>
            Unique name of the setting group.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinitionGroup.DisplayName">
            <summary>
            Display name of the setting.
            This can be used to show setting to the user.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinitionGroup.Parent">
            <summary>
            Gets parent of this group.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingDefinitionGroup.Children">
            <summary>
            Gets a list of all children of this group.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingHelper">
            <summary>
            This class is used to simplify getting settings from anywhere.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingHelper.GetSettingValue(System.String)">
            <summary>
            Gets current value of a setting.
            It gets the setting value, overwrited by application and the current user if exists.
            </summary>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Abp.Configuration.SettingHelper.GetSettingValue``1(System.String)">
            <summary>
            Gets value of a setting.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="name">Unique name of the setting</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="T:Abp.Configuration.SettingDefinitionManager">
            <summary>
            Implements <see cref="T:Abp.Configuration.ISettingDefinitionManager"/>.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingDefinitionManager.#ctor(Abp.Dependency.IIocManager,Abp.Configuration.Startup.ISettingsConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingDefinitionProviderContext">
            <summary>
            The context that is used in setting providers.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingManager">
            <summary>
            This class implements <see cref="T:Abp.Configuration.ISettingManager"/> to manage setting values in the database.
            </summary>
        </member>
        <member name="F:Abp.Configuration.SettingManager.ApplicationSettingsCacheKey">
            <summary>
            Cache key for application settings.
            </summary>
        </member>
        <member name="F:Abp.Configuration.SettingManager.ApplicationSettingsCacheName">
            <summary>
             Unique name of the application settings cache: AbpApplicationSettingsCache.
            </summary>
        </member>
        <member name="F:Abp.Configuration.SettingManager.TenantSettingsCacheName">
            <summary>
             Unique name of the tenant settings cache: AbpApplicationSettingsCache.
            </summary>
        </member>
        <member name="F:Abp.Configuration.SettingManager.UsersSettingsCacheName">
            <summary>
             Unique name of the user settings cache: AbpApplicationSettingsCache.
            </summary>
        </member>
        <member name="M:Abp.Configuration.SettingManager.#ctor(Abp.Configuration.ISettingDefinitionManager,Abp.Runtime.Caching.ICacheManager)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.GetSettingValueAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.GetAllSettingValuesAsync(Abp.Configuration.SettingScopes)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.GetAllSettingValuesForApplicationAsync">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.GetAllSettingValuesForTenantAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.GetAllSettingValuesForUserAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.ChangeSettingForApplicationAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.ChangeSettingForTenantAsync(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Configuration.SettingManager.ChangeSettingForUserAsync(System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Configuration.SettingManager.AbpSession">
            <summary>
            Reference to the current Session.
            </summary>
        </member>
        <member name="P:Abp.Configuration.SettingManager.SettingStore">
            <summary>
            Reference to the setting store.
            </summary>
        </member>
        <member name="T:Abp.Configuration.ISettingValue">
            <summary>
            Represents value of a setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.ISettingValue.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:Abp.Configuration.ISettingValue.Value">
            <summary>
            Value of the setting.
            </summary>
        </member>
        <member name="T:Abp.Configuration.SettingScopes">
            <summary>
            Defines scope of a setting.
            </summary>
        </member>
        <member name="F:Abp.Configuration.SettingScopes.Application">
            <summary>
            Represents a setting that can be configured/changed for the application level.
            </summary>
        </member>
        <member name="F:Abp.Configuration.SettingScopes.Tenant">
            <summary>
            Represents a setting that can be configured/changed for each Tenant.
            This is reserved
            </summary>
        </member>
        <member name="F:Abp.Configuration.SettingScopes.User">
            <summary>
            Represents a setting that can be configured/changed for each User.
            </summary>
        </member>
        <member name="T:Abp.Dependency.ConventionalRegistrationContext">
            <summary>
            This class is used to pass needed objects on conventional registration process.
            </summary>
        </member>
        <member name="P:Abp.Dependency.ConventionalRegistrationContext.Assembly">
            <summary>
            Gets the registering Assembly.
            </summary>
        </member>
        <member name="P:Abp.Dependency.ConventionalRegistrationContext.IocManager">
            <summary>
            Reference to the IOC Container to register types.
            </summary>
        </member>
        <member name="P:Abp.Dependency.ConventionalRegistrationContext.Config">
            <summary>
            Registration configuration.
            </summary>
        </member>
        <member name="T:Abp.Configuration.DictionayBasedConfig">
            <summary>
            Used to set/get custom configuration.
            </summary>
        </member>
        <member name="M:Abp.Configuration.DictionayBasedConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Configuration.DictionayBasedConfig.Get``1(System.String)">
            <summary>
            Gets a configuration value as a specific type.
            </summary>
            <param name="name">Name of the config</param>
            <typeparam name="T">Type of the config</typeparam>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.DictionayBasedConfig.Set``1(System.String,``0)">
            <summary>
            Used to set a string named configuration.
            If there is already a configuration with same <paramref name="name"/>, it's overwritten.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="value">Value of the configuration</param>
        </member>
        <member name="M:Abp.Configuration.DictionayBasedConfig.Get(System.String)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.DictionayBasedConfig.Get(System.String,System.Object)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.DictionayBasedConfig.Get``1(System.String,``0)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Abp.Configuration.DictionayBasedConfig.GetOrCreate``1(System.String,System.Func{``0})">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="creator">The function that will be called to create if given configuration is not found</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="P:Abp.Configuration.DictionayBasedConfig.CustomSettings">
            <summary>
            Dictionary of custom configuration.
            </summary>
        </member>
        <member name="P:Abp.Configuration.DictionayBasedConfig.Item(System.String)">
            <summary>
            Gets/sets a config value.
            Returns null if no config with given name.
            </summary>
            <param name="name">Name of the config</param>
            <returns>Value of the config</returns>
        </member>
        <member name="T:Abp.Domain.Entities.Auditing.CreationAuditedEntity`2">
            <summary>
            This class can be used to simplify implementing <see cref="T:Abp.Domain.Entities.Auditing.ICreationAudited`1"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Abp.Domain.Entities.Auditing.CreationAuditedEntity`2.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.EntityExtensions">
            <summary>
            Some usefull extension methods for Entities.
            </summary>
        </member>
        <member name="M:Abp.Domain.Entities.EntityExtensions.IsNullOrDeleted(Abp.Domain.Entities.ISoftDelete)">
            <summary>
            Check if this Entity is null of marked as deleted.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkInterceptor">
            <summary>
            This interceptor is used to manage database connection and transactions.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts a method.
            </summary>
            <param name="invocation">Method invocation arguments</param>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkRegistrar">
            <summary>
            This class is used to register interceptor for needed classes for Unit Of Work mechanism.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkRegistrar.Initialize(Abp.Dependency.IIocManager)">
            <summary>
            Initializes the registerer.
            </summary>sssss
            <param name="iocManager">IOC manager</param>
        </member>
        <member name="T:Abp.Localization.LocalizableString">
            <summary>
            Represents a string that can be localized.
            </summary>
        </member>
        <member name="M:Abp.Localization.LocalizableString.#ctor(System.String,System.String)">
            <param name="name">Unique name of the localization source</param>
            <param name="sourceName">Unique Name of the string to be localized</param>
        </member>
        <member name="M:Abp.Localization.LocalizableString.Localize">
            <summary>
            Localizes the string in current language.
            </summary>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.LocalizableString.Localize(System.Globalization.CultureInfo)">
            <summary>
            Localizes the string in current language.
            </summary>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="P:Abp.Localization.LocalizableString.SourceName">
            <summary>
            Unique name of the localization source.
            </summary>
        </member>
        <member name="P:Abp.Localization.LocalizableString.Name">
            <summary>
            Unique Name of the string to be localized.
            </summary>
        </member>
        <member name="T:Abp.Logging.LogHelper">
            <summary>
            This class can be used to write logs from somewhere where it's a little hard to get a reference to the <see cref="T:Castle.Core.Logging.ILogger"/>.
            Normally, get <see cref="T:Castle.Core.Logging.ILogger"/> using property injection.
            </summary>
        </member>
        <member name="P:Abp.Logging.LogHelper.Logger">
            <summary>
            A reference to the logger.
            </summary>
        </member>
        <member name="T:Abp.AbpKernelModule">
            <summary>
            Kernel (core) module of the ABP system.
            No need to depend on this, it's automatically the first module always.
            </summary>
        </member>
        <member name="T:Abp.Modules.AbpModule">
            <summary>
            This class must be implemented by all module definition classes.
            </summary>
            <remarks>
            A module definition class is generally located in it's own assembly
            and implements some action in module events on application startup and shotdown.
            It also defines depended modules.
            </remarks>
        </member>
        <member name="M:Abp.Modules.AbpModule.PreInitialize">
            <summary>
            This is the first event called on application startup. 
            Codes can be placed here to run before dependency injection registrations.
            </summary>
        </member>
        <member name="M:Abp.Modules.AbpModule.Initialize">
            <summary>
            This method is used to register dependencies for this module.
            </summary>
        </member>
        <member name="M:Abp.Modules.AbpModule.PostInitialize">
            <summary>
            This method is called lastly on application startup.
            </summary>
        </member>
        <member name="M:Abp.Modules.AbpModule.Shutdown">
            <summary>
            This method is called when the application is being shutdown.
            </summary>
        </member>
        <member name="M:Abp.Modules.AbpModule.IsAbpModule(System.Type)">
            <summary>
            Checks if given type is an Abp module class.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Abp.Modules.AbpModule.FindDependedModuleTypes(System.Type)">
            <summary>
            Finds depended modules of a module.
            </summary>
            <param name="moduleType"></param>
            <returns></returns>
        </member>
        <member name="P:Abp.Modules.AbpModule.IocManager">
            <summary>
            Gets a reference to the IOC manager.
            </summary>
        </member>
        <member name="P:Abp.Modules.AbpModule.Configuration">
            <summary>
            Gets a reference to the ABP configuration.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1">
            <summary>
            This class is used to store items to a thread safe and generic cache in a simple manner.
            </summary>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="F:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1._cache">
            <summary>
            The real cache object to store items.
            </summary>
        </member>
        <member name="F:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1._defaultCacheItemPolicy">
            <summary>
            <see cref="F:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1._defaultCacheItemPolicy"/> is used if no policy is specified.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object to store items</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object</param>
            <param name="slidingExpiration">Default cache policy as sliding expiration</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object</param>
            <param name="absoluteExpiration">Default cache policy as absolute expiration</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.#ctor(System.Runtime.Caching.ObjectCache,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1"/> object.
            </summary>
            <param name="cache">The real cache object</param>
            <param name="defaultCacheItemPolicy">Default cache policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Get(System.String)">
            <summary>
            Gets an item from cache if exists, or null.
            </summary>
            <param name="key">Key to get item</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Get(System.String,System.Func{`0})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Get(System.String,System.TimeSpan,System.Func{`0})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="slidingExpiration">Sliding expiration policy</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Get(System.String,System.DateTimeOffset,System.Func{`0})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="absoluteExpiration">Absolute expiration policy</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Get(System.String,System.Func{System.Runtime.Caching.CacheItemPolicy},System.Func{`0})">
            <summary>
            Gets an item from cache if exists, or calls <paramref name="factoryMethod"/> to create cache item and return it.
            </summary>
            <param name="key">Key to get item</param>
            <param name="cacheItemPolicy">Cache policy creation method (called only if item is being added to the cache)</param>
            <param name="factoryMethod">A factory method to create item if it's not exists in cache</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Set(System.String,`0)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Set(System.String,`0,System.TimeSpan)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
            <param name="slidingExpiration">Sliding expiration policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Set(System.String,`0,System.DateTimeOffset)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
            <param name="absoluteExpiration">Absolute expiration policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Set(System.String,`0,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Adds/replaces an item in the cache.
            </summary>
            <param name="key">Key of the item</param>
            <param name="value">Value of the item</param>
            <param name="cacheItemPolicy">Cache item policy</param>
        </member>
        <member name="M:Abp.Runtime.Caching.Memory.ThreadSafeObjectCache`1.Remove(System.String)">
            <summary>
            Removes an item from the cache (if it exists).
            </summary>
            <param name="key">Key of the item</param>
            <returns>Removed item (if it exists)</returns>
        </member>
        <member name="T:Abp.Dependency.ConventionalRegistrationConfig">
            <summary>
            This class is used to pass configuration/options while registering classes in conventional way.
            </summary>
        </member>
        <member name="M:Abp.Dependency.ConventionalRegistrationConfig.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Dependency.ConventionalRegistrationConfig"/> object.
            </summary>
        </member>
        <member name="P:Abp.Dependency.ConventionalRegistrationConfig.InstallInstallers">
            <summary>
            Install all <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations automatically or not.
            Default: true. 
            </summary>
        </member>
        <member name="T:Abp.Dependency.BasicConventionalRegistrar">
            <summary>
            This class is used to register basic dependency implementations such as <see cref="T:Abp.Dependency.ITransientDependency"/> and <see cref="T:Abp.Dependency.ISingletonDependency"/>.
            </summary>
        </member>
        <member name="T:Abp.Dependency.IConventionalDependencyRegistrar">
            <summary>
            This interface is used to register dependencies by conventions. 
            </summary>
            <remarks>
            Implement this interface and register to <see cref="M:Abp.Dependency.IocManager.AddConventionalRegistrar(Abp.Dependency.IConventionalDependencyRegistrar)"/> method to be able
            to register classes by your own conventions.
            </remarks>
        </member>
        <member name="M:Abp.Dependency.IConventionalDependencyRegistrar.RegisterAssembly(Abp.Dependency.IConventionalRegistrationContext)">
            <summary>
            Registers types of given assembly by convention.
            </summary>
            <param name="context">Registration context</param>
        </member>
        <member name="T:Abp.Dependency.IocManager">
            <summary>
            This class is used to directly perform dependency injection tasks.
            </summary>
        </member>
        <member name="F:Abp.Dependency.IocManager._conventionalRegistrars">
            <summary>
            List of all registered conventional registrars.
            </summary>
        </member>
        <member name="M:Abp.Dependency.IocManager.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Dependency.IocManager"/> object.
            Normally, you don't directly instantiate an <see cref="T:Abp.Dependency.IocManager"/>.
            This may be useful for test purposes.
            </summary>
        </member>
        <member name="M:Abp.Dependency.IocManager.AddConventionalRegistrar(Abp.Dependency.IConventionalDependencyRegistrar)">
            <summary>
            Adds a dependency registrar for conventional registration.
            </summary>
            <param name="registrar">dependency registrar</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.RegisterAssemblyByConvention(System.Reflection.Assembly)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Abp.Dependency.IocManager.AddConventionalRegistrar(Abp.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.RegisterAssemblyByConvention(System.Reflection.Assembly,Abp.Dependency.ConventionalRegistrationConfig)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Abp.Dependency.IocManager.AddConventionalRegistrar(Abp.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
            <param name="config">Additional configuration</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.Register``1(Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <typeparam name="TType">Type of the class</typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.Register(System.Type,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <param name="type">Type of the class</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.Register``2(Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation.
            </summary>
            <typeparam name="TType">Registering type</typeparam>
            <typeparam name="TImpl">The type that implements <see cref="!:TType"/></typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.Register(System.Type,System.Type,Abp.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a class as self registration.
            </summary>
            <param name="type">Type of the class</param>
            <param name="impl">The type that implements <paramref name="type"/></param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="TType">Type to check</typeparam>
        </member>
        <member name="M:Abp.Dependency.IocManager.Resolve``1">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <returns>The instance object</returns>
        </member>
        <member name="M:Abp.Dependency.IocManager.Resolve``1(System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object</returns>
        </member>
        <member name="M:Abp.Dependency.IocManager.Resolve(System.Type)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <returns>The instance object</returns>
        </member>
        <member name="M:Abp.Dependency.IocManager.Resolve(System.Type,System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Abp.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object</returns>
        </member>
        <member name="M:Abp.Dependency.IocManager.Release(System.Object)">
            <summary>
            Releases a pre-resolved object. See Resolve methods.
            </summary>
            <param name="obj">Object to be released</param>
        </member>
        <member name="M:Abp.Dependency.IocManager.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Dependency.IocManager.Instance">
            <summary>
            The Singleton instance.
            </summary>
        </member>
        <member name="P:Abp.Dependency.IocManager.IocContainer">
            <summary>
            Reference to the Castle Windsor Container.
            </summary>
        </member>
        <member name="T:Abp.Domain.Policies.IPolicy">
            <summary>
            This interface can be implemented by all Policy classes/interfaces to identify them by convention.
            </summary>
        </member>
        <member name="T:Abp.Domain.Repositories.IRepository`1">
            <summary>
            A shortcut of <see cref="T:Abp.Domain.Repositories.IRepository`2"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkAttribute">
            <summary>
            This attribute is used to indicate that declaring method is atomic and should be considered as a unit of work.
            A method that has this attribute is intercepted, a database connection is opened and a transaction is started before call the method.
            At the end of method call, transaction is commited and all changes applied to the database if there is no exception,
            othervise it's rolled back. 
            </summary>
            <remarks>
            This attribute has no effect if there is already a unit of work before calling this method, if so, it uses the same transaction.
            </remarks>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor">
            <summary>
            Creates a new UnitOfWorkAttribute object.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> object.
            </summary>
            <param name="isTransactional">
            Is this unit of work will be transactional?
            </param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> object.
            </summary>
            <param name="timeout">As milliseconds</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Boolean,System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> object.
            </summary>
            <param name="isTransactional">Is this unit of work will be transactional?</param>
            <param name="timeout">As milliseconds</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.IsolationLevel)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Abp.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="isolationLevel">Transaction isolation level</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.IsolationLevel,System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Abp.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="isolationLevel">Transaction isolation level</param>
            <param name="timeout">Transaction  timeout as milliseconds</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.TransactionScopeOption)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Abp.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="scope">Transaction scope</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Int32)">
            <summary>
            Creates a new <see cref="T:Abp.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Abp.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="scope">Transaction scope</param>
            <param name="timeout">Transaction  timeout as milliseconds</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkAttribute.GetUnitOfWorkAttributeOrNull(System.Reflection.MemberInfo)">
            <summary>
            Gets UnitOfWorkAttribute for given method or null if no attribute defined.
            </summary>
            <param name="methodInfo">Method to get attribute</param>
            <returns>The UnitOfWorkAttribute object</returns>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkAttribute.Scope">
            <summary>
            Scope option.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkAttribute.IsTransactional">
            <summary>
            Is this UOW transactional?
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkAttribute.Timeout">
            <summary>
            Timeout of UOW As milliseconds.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkAttribute.IsolationLevel">
            <summary>
            If this UOW is transactional, this option indicated the isolation level of the transaction.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Abp.Domain.Uow.UnitOfWorkAttribute.IsDisabled">
            <summary>
            Used to prevent starting a unit of work for the method.
            If there is already a started unit of work, this property is ignored.
            Default: false.
            </summary>
        </member>
        <member name="T:Abp.Domain.Uow.UnitOfWorkHelper">
            <summary>
            A helper class to simplify unit of work process.
            </summary>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkHelper.IsConventionalUowClass(System.Type)">
            <summary>
            Returns true if UOW must be used for given type as convention.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkHelper.HasUnitOfWorkAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns true if given method has UnitOfWorkAttribute attribute.
            </summary>
            <param name="methodInfo">Method info to check</param>
        </member>
        <member name="M:Abp.Domain.Uow.UnitOfWorkHelper.GetUnitOfWorkAttributeOrNull(System.Reflection.MemberInfo)">
            <summary>
            Returns UnitOfWorkAttribute it exists.
            </summary>
            <param name="methodInfo">Method info to check</param>
        </member>
        <member name="T:Abp.Domain.Entities.Entity">
            <summary>
            A shortcut of <see cref="T:Abp.Domain.Entities.Entity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Domain.Entities.IEntity">
            <summary>
            A shortcut of <see cref="T:Abp.Domain.Entities.IEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Entities.EntityCreatedEventData`1">
            <summary>
            This type of event can be used to notify creation of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Abp.Events.Bus.Entities.EntityCreatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is created</param>
        </member>
        <member name="T:Abp.Events.Bus.Entities.EntityDeletedEventData`1">
            <summary>
            This type of event can be used to notify deletion of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Abp.Events.Bus.Entities.EntityDeletedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is deleted</param>
        </member>
        <member name="T:Abp.Events.Bus.Entities.EntityUpdatedEventData`1">
            <summary>
            This type of event can be used to notify update of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Abp.Events.Bus.Entities.EntityUpdatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is updated</param>
        </member>
        <member name="T:Abp.Events.Bus.EventBusInstaller">
            <summary>
            Installs event bus system and registers all handlers automatically.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Factories.Internals.FactoryUnregistrar">
            <summary>
            Used to unregister a <see cref="T:Abp.Events.Bus.Factories.IEventHandlerFactory"/> on <see cref="M:Abp.Events.Bus.Factories.Internals.FactoryUnregistrar.Dispose"/> method.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Handlers.Internals.ActionEventHandler`1">
            <summary>
            This event handler is an adapter to be able to use an action as <see cref="T:Abp.Events.Bus.Handlers.IEventHandler`1"/> implementation.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="T:Abp.Events.Bus.Handlers.IEventHandler`1">
            <summary>
            Defines an interface of a class that handles events of type <see cref="!:TEventData"/>.
            </summary>
            <typeparam name="TEventData">Event type to handle</typeparam>
        </member>
        <member name="T:Abp.Events.Bus.Handlers.IEventHandler">
            <summary>
            Undirect base interface for all event handlers.
            Implement <see cref="T:Abp.Events.Bus.Handlers.IEventHandler`1"/> instead of this one.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.Handlers.IEventHandler`1.HandleEvent(`0)">
            <summary>
            Handler handles the event by implementing this method.
            </summary>
            <param name="eventData">Event data</param>
        </member>
        <member name="M:Abp.Events.Bus.Handlers.Internals.ActionEventHandler`1.#ctor(System.Action{`0})">
            <summary>
            Creates a new instance of <see cref="T:Abp.Events.Bus.Handlers.Internals.ActionEventHandler`1"/>.
            </summary>
            <param name="handler">Action to handle the event</param>
        </member>
        <member name="M:Abp.Events.Bus.Handlers.Internals.ActionEventHandler`1.HandleEvent(`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="P:Abp.Events.Bus.Handlers.Internals.ActionEventHandler`1.Action">
            <summary>
            Action to handle the event.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Factories.IEventHandlerFactory">
            <summary>
            Defines an interface for factories those are responsible to create/get and release of event handlers.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.Factories.IEventHandlerFactory.GetHandler">
            <summary>
            Gets an event handler.
            </summary>
            <returns>The event handler</returns>
        </member>
        <member name="M:Abp.Events.Bus.Factories.IEventHandlerFactory.ReleaseHandler(Abp.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Releases an event handler.
            </summary>
            <param name="handler">Handle to be released</param>
        </member>
        <member name="T:Abp.Events.Bus.Factories.IocHandlerFactory">
            <summary>
            This <see cref="T:Abp.Events.Bus.Factories.IEventHandlerFactory"/> implementation is used to get/release
            handlers using Ioc.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.Factories.IocHandlerFactory.#ctor(Abp.Dependency.IIocResolver,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Abp.Events.Bus.Factories.IocHandlerFactory"/> class.
            </summary>
            <param name="iocResolver"></param>
            <param name="handlerType">Type of the handler</param>
        </member>
        <member name="M:Abp.Events.Bus.Factories.IocHandlerFactory.GetHandler">
            <summary>
            Resolves handler object from Ioc container.
            </summary>
            <returns>Resolved handler object</returns>
        </member>
        <member name="M:Abp.Events.Bus.Factories.IocHandlerFactory.ReleaseHandler(Abp.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Releases handler object using Ioc container.
            </summary>
            <param name="handler">Handler to be released</param>
        </member>
        <member name="P:Abp.Events.Bus.Factories.IocHandlerFactory.HandlerType">
            <summary>
            Type of the handler.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Factories.Internals.SingleInstanceHandlerFactory">
            <summary>
            This <see cref="T:Abp.Events.Bus.Factories.IEventHandlerFactory"/> implementation is used to handle events
            by a single instance object. 
            </summary>
            <remarks>
            This class always gets the same single instance of handler.
            </remarks>
        </member>
        <member name="M:Abp.Events.Bus.Factories.Internals.SingleInstanceHandlerFactory.#ctor(Abp.Events.Bus.Handlers.IEventHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="P:Abp.Events.Bus.Factories.Internals.SingleInstanceHandlerFactory.HandlerInstance">
            <summary>
            The event handler instance.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.EventBus">
            <summary>
            Implements EventBus as Singleton pattern.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.IEventBus">
            <summary>
            Defines interface of the event bus.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Register``1(System.Action{``0})">
            <summary>
            Registers to an event.
            Given action is called for all event occurrences.
            </summary>
            <param name="action">Action to handle events</param>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Register``1(Abp.Events.Bus.Handlers.IEventHandler{``0})">
            <summary>
            Registers to an event. 
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Register``2">
            <summary>
            Registers to an event.
            A new instance of <see cref="!:THandler"/> object is created for every event occurrence.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <typeparam name="THandler">Type of the event handler</typeparam>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Register(System.Type,Abp.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Registers to an event.
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Register``1(Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            Given factory is used to create/release handlers
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="handlerFactory">A factory to create/release handlers</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Register(System.Type,Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handlerFactory">A factory to create/release handlers</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Unregister``1(System.Action{``0})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="action"></param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Unregister``1(Abp.Events.Bus.Handlers.IEventHandler{``0})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Unregister(System.Type,Abp.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Unregister``1(Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Unregister(System.Type,Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.UnregisterAll``1">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.UnregisterAll(System.Type)">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <param name="eventType">Event type</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Trigger``1(``0)">
            <summary>
            Triggers an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Trigger``1(System.Object,``0)">
            <summary>
            Triggers an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Trigger(System.Type,Abp.Events.Bus.IEventData)">
            <summary>
            Triggers an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.Trigger(System.Type,System.Object,Abp.Events.Bus.IEventData)">
            <summary>
            Triggers an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.TriggerAsync``1(``0)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.TriggerAsync``1(System.Object,``0)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.TriggerAsync(System.Type,Abp.Events.Bus.IEventData)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Abp.Events.Bus.IEventBus.TriggerAsync(System.Type,System.Object,Abp.Events.Bus.IEventData)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="F:Abp.Events.Bus.EventBus._handlerFactories">
            <summary>
            All registered handler factories.
            Key: Type of the event
            Value: List of handler factories
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.Events.Bus.EventBus"/> instance.
            Instead of creating a new instace, you can use <see cref="P:Abp.Events.Bus.EventBus.Default"/> to use Global <see cref="T:Abp.Events.Bus.EventBus"/>.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Register``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Register``1(Abp.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Register``2">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Register(System.Type,Abp.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Register``1(Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Register(System.Type,Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Unregister``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Unregister``1(Abp.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Unregister(System.Type,Abp.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Unregister``1(Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Unregister(System.Type,Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.UnregisterAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.UnregisterAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Trigger``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Trigger``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Trigger(System.Type,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.Trigger(System.Type,System.Object,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.TriggerAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.TriggerAsync``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.TriggerAsync(System.Type,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.EventBus.TriggerAsync(System.Type,System.Object,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Events.Bus.EventBus.Default">
            <summary>
            Gets the default <see cref="T:Abp.Events.Bus.EventBus"/> instance.
            </summary>
        </member>
        <member name="P:Abp.Events.Bus.EventBus.Logger">
            <summary>
            Reference to the Logger.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.Factories.Internals.TransientEventHandlerFactory`1">
            <summary>
            This <see cref="T:Abp.Events.Bus.Factories.IEventHandlerFactory"/> implementation is used to handle events
            by a single instance object. 
            </summary>
            <remarks>
            This class always gets the same single instance of handler.
            </remarks>
        </member>
        <member name="M:Abp.Events.Bus.Factories.Internals.TransientEventHandlerFactory`1.GetHandler">
            <summary>
            Creates a new instance of the handler object.
            </summary>
            <returns>The handler object</returns>
        </member>
        <member name="M:Abp.Events.Bus.Factories.Internals.TransientEventHandlerFactory`1.ReleaseHandler(Abp.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Disposes the handler object if it's <see cref="T:System.IDisposable"/>. Does nothing if it's not.
            </summary>
            <param name="handler">Handler to be released</param>
        </member>
        <member name="T:Abp.Localization.Dictionaries.LocalizationDictionary">
            <summary>
            Represents a simple implementation of <see cref="T:Abp.Localization.Dictionaries.ILocalizationDictionary"/> interface.
            </summary>
        </member>
        <member name="T:Abp.Localization.Dictionaries.ILocalizationDictionary">
            <summary>
            Represents a dictionary that is used to find a localized string.
            </summary>
        </member>
        <member name="M:Abp.Localization.Dictionaries.ILocalizationDictionary.GetOrNull(System.String)">
            <summary>
            Gets a <see cref="T:Abp.Localization.LocalizedString"/> for given <paramref name="name"/>.
            </summary>
            <param name="name">Name (key) to get localized string</param>
            <returns>The localized string or null if not found in this dictionary</returns>
        </member>
        <member name="M:Abp.Localization.Dictionaries.ILocalizationDictionary.GetAllStrings">
            <summary>
            Gets a list of all strings in this dictionary.
            </summary>
            <returns>List of all <see cref="T:Abp.Localization.LocalizedString"/> object</returns>
        </member>
        <member name="P:Abp.Localization.Dictionaries.ILocalizationDictionary.CultureInfo">
            <summary>
            Culture of the dictionary.
            </summary>
        </member>
        <member name="P:Abp.Localization.Dictionaries.ILocalizationDictionary.Item(System.String)">
            <summary>
            Gets/sets a string for this dictionary with given name (key).
            </summary>
            <param name="name">Name to get/set</param>
        </member>
        <member name="M:Abp.Localization.Dictionaries.LocalizationDictionary.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a new <see cref="T:Abp.Localization.Dictionaries.LocalizationDictionary"/> object.
            </summary>
            <param name="cultureInfo">Culture of the dictionary</param>
        </member>
        <member name="M:Abp.Localization.Dictionaries.LocalizationDictionary.GetOrNull(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Localization.Dictionaries.LocalizationDictionary.GetAllStrings">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Localization.Dictionaries.LocalizationDictionary.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Localization.Dictionaries.LocalizationDictionary.CultureInfo">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Localization.Dictionaries.LocalizationDictionary.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Abp.Localization.Dictionaries.Xml.XmlLocalizationDictionary">
            <summary>
            This class is used to build a localization dictionary from XML.
            </summary>
            <remarks>
            Use static Build methods to create instance of this class.
            </remarks>
        </member>
        <member name="M:Abp.Localization.Dictionaries.Xml.XmlLocalizationDictionary.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Private constructor.
            </summary>
            <param name="cultureInfo">Culture of the dictionary</param>
        </member>
        <member name="M:Abp.Localization.Dictionaries.Xml.XmlLocalizationDictionary.BuildFomFile(System.String)">
            <summary>
            Builds an <see cref="T:Abp.Localization.Dictionaries.Xml.XmlLocalizationDictionary"/> from given file.
            </summary>
            <param name="filePath">Path of the file</param>
        </member>
        <member name="M:Abp.Localization.Dictionaries.Xml.XmlLocalizationDictionary.BuildFomXmlString(System.String)">
            <summary>
            Builds an <see cref="T:Abp.Localization.Dictionaries.Xml.XmlLocalizationDictionary"/> from given xml string.
            </summary>
            <param name="xmlString">XML string</param>
        </member>
        <member name="T:Abp.Runtime.Security.AbpClaimTypes">
            <summary>
            Used to get ABP-specific claim type names.
            </summary>
        </member>
        <member name="F:Abp.Runtime.Security.AbpClaimTypes.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="F:Abp.Runtime.Security.AbpClaimTypes.ImpersonatorUserId">
            <summary>
            ImpersonatorUserId.
            </summary>
        </member>
        <member name="F:Abp.Runtime.Security.AbpClaimTypes.ImpersonatorTenantId">
            <summary>
            ImpersonatorTenantId
            </summary>
        </member>
        <member name="T:Abp.Runtime.Validation.AbpValidationException">
            <summary>
            This exception type is used to throws validation exceptions.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Validation.AbpValidationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Validation.AbpValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Validation.AbpValidationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Abp.Runtime.Validation.AbpValidationException.#ctor(System.String,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="validationErrors">Validation errors</param>
        </member>
        <member name="M:Abp.Runtime.Validation.AbpValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="P:Abp.Runtime.Validation.AbpValidationException.ValidationErrors">
            <summary>
            Detailed list of validation errors for this exception.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Validation.ICustomValidate">
            <summary>
            Defines interface that must be implemented by classes those must be validated with custom rules.
            So, implementing class can define it's own validation logic.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Validation.ICustomValidate.AddValidationErrors(System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            This method is used to validate the object.
            </summary>
            <param name="results">List of validation results (errors). Add validation errors to this list.</param>
        </member>
        <member name="T:Abp.Runtime.Validation.IShouldNormalize">
            <summary>
            This interface is used to normalize inputs before method execution.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Validation.IShouldNormalize.Normalize">
            <summary>
            This method is called lastly before method execution (after validation if exists).
            </summary>
        </member>
        <member name="T:Abp.Runtime.Validation.Interception.MethodInvocationValidator">
            <summary>
            This class is used to validate a method call (invocation) for method arguments.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Validation.Interception.MethodInvocationValidator.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Creates a new <see cref="T:Abp.Runtime.Validation.Interception.MethodInvocationValidator"/> instance.
            </summary>
            <param name="method">Method to be validated</param>
            <param name="parameterValues">List of arguments those are used to call the <paramref name="method"/>.</param>
        </member>
        <member name="M:Abp.Runtime.Validation.Interception.MethodInvocationValidator.Validate">
            <summary>
            Validates the method invocation.
            </summary>
        </member>
        <member name="M:Abp.Runtime.Validation.Interception.MethodInvocationValidator.ValidateMethodParameter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Validates given parameter for given value.
            </summary>
            <param name="parameterInfo">Parameter of the method to validate</param>
            <param name="parameterValue">Value to validate</param>
        </member>
        <member name="M:Abp.Runtime.Validation.Interception.MethodInvocationValidator.SetValidationAttributeErrors(System.Object)">
            <summary>
            Checks all properties for DataAnnotations attributes.
            </summary>
        </member>
        <member name="T:Abp.Runtime.Validation.Interception.ValidationInterceptor">
            <summary>
            This interceptor is used intercept method calls for classes which's methods must be validated.
            </summary>
        </member>
        <member name="T:Abp.AbpInitializationException">
            <summary>
            This exception is thrown if a problem on ABP initialization progress.
            </summary>
        </member>
        <member name="M:Abp.AbpInitializationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.AbpInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="M:Abp.AbpInitializationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Abp.AbpInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Abp.Configuration.Startup.AbpStartupConfiguration">
            <summary>
            This class is used to configure ABP and modules on startup.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.IAbpStartupConfiguration">
            <summary>
            Used to configure ABP and modules on startup.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.IocManager">
            <summary>
            Gets the IOC manager associated with this configuration.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Localization">
            <summary>
            Used to set localization configuration.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Navigation">
            <summary>
            Used to configure navigation.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.EventBus">
            <summary>
            Used to configure <see cref="T:Abp.Events.Bus.IEventBus"/>.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Auditing">
            <summary>
            Used to configure auditing.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Caching">
            <summary>
            Used to configure caching.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.MultiTenancy">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Authorization">
            <summary>
            Used to configure authorization.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Settings">
            <summary>
            Used to configure settings.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.DefaultNameOrConnectionString">
            <summary>
            Gets/sets default connection string used by ORM module.
            It can be name of a connection string in application's config file or can be full connection string.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.Modules">
            <summary>
            Used to configure modules.
            Modules can write extension methods to <see cref="T:Abp.Configuration.Startup.IModuleConfigurations"/> to add module specific configurations.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.IAbpStartupConfiguration.UnitOfWork">
            <summary>
            Used to configure unit of work defaults.
            </summary>
        </member>
        <member name="M:Abp.Configuration.Startup.AbpStartupConfiguration.#ctor(Abp.Dependency.IIocManager)">
            <summary>
            Private constructor for singleton pattern.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.Localization">
            <summary>
            Used to set localization configuration.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.Authorization">
            <summary>
            Used to configure authorization.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.Settings">
            <summary>
            Used to configure settings.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.DefaultNameOrConnectionString">
            <summary>
            Gets/sets default connection string used by ORM module.
            It can be name of a connection string in application's config file or can be full connection string.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.Modules">
            <summary>
            Used to configure modules.
            Modules can write extension methods to <see cref="T:Abp.Configuration.Startup.ModuleConfigurations"/> to add module specific configurations.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.UnitOfWork">
            <summary>
            Used to configure unit of work defaults.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.Navigation">
            <summary>
            Used to configure navigation.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.EventBus">
            <summary>
            Used to configure <see cref="T:Abp.Events.Bus.IEventBus"/>.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.Auditing">
            <summary>
            Used to configure auditing.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.AbpStartupConfiguration.MultiTenancy">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.LocalizationConfiguration">
            <summary>
            Used for localization configurations.
            </summary>
        </member>
        <member name="T:Abp.Configuration.Startup.ILocalizationConfiguration">
            <summary>
            Used for localization configurations.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.ILocalizationConfiguration.Languages">
            <summary>
            Used to set languages available for this application.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.ILocalizationConfiguration.Sources">
            <summary>
            List of localization sources.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.ILocalizationConfiguration.IsEnabled">
            <summary>
            Used to enable/disable localization system.
            Default: true.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.ILocalizationConfiguration.ReturnGivenTextIfNotFound">
            <summary>
            If this is set to true, the given text (name) is returned
            if not found in the localization source. That prevent exceptions if
            given name is not defined in the localization sources.
            Also writes a warning log.
            Default: true.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.ILocalizationConfiguration.WrapGivenTextIfNotFound">
            <summary>
            It returns the given text by wrapping with [ and ] chars
            if not found in the localization source.
            This is considered only if <see cref="P:Abp.Configuration.Startup.ILocalizationConfiguration.ReturnGivenTextIfNotFound"/> is true.
            Default: true.
            </summary>
        </member>
        <member name="P:Abp.Configuration.Startup.LocalizationConfiguration.Languages">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Configuration.Startup.LocalizationConfiguration.Sources">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Configuration.Startup.LocalizationConfiguration.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Configuration.Startup.LocalizationConfiguration.ReturnGivenTextIfNotFound">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Configuration.Startup.LocalizationConfiguration.WrapGivenTextIfNotFound">
            <inheritdoc/>
        </member>
        <member name="T:Abp.Threading.AsyncHelper">
            <summary>
            Provides some helper methods to work with async methods.
            </summary>
        </member>
        <member name="M:Abp.Threading.AsyncHelper.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            Checks if given method is an async method.
            </summary>
            <param name="method">A method to check</param>
        </member>
        <member name="M:Abp.Threading.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="func">A function that returns a result</param>
            <typeparam name="TResult">Result type</typeparam>
            <returns>Result of the async operation</returns>
        </member>
        <member name="M:Abp.Threading.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="action">An async action</param>
        </member>
        <member name="T:Abp.Threading.Extensions.LockExtensions">
            <summary>
            Extension methods to make locking easier.
            </summary>
        </member>
        <member name="M:Abp.Threading.Extensions.LockExtensions.Locking(System.Object,System.Action)">
            <summary>
            Executes given <see cref="!:action"/> by locking given <see cref="!:source"/> object.
            </summary>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:Abp.Threading.Extensions.LockExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            Executes given <see cref="!:action"/> by locking given <see cref="!:source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:Abp.Threading.Extensions.LockExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            Executes given <see cref="!:func"/> and returns it's value by locking given <see cref="!:source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <see cref="!:func"/></returns>
        </member>
        <member name="M:Abp.Threading.Extensions.LockExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            Executes given <see cref="!:func"/> and returns it's value by locking given <see cref="!:source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <see cref="!:func"/></returns>
        </member>
        <member name="T:Abp.Timing.LocalClockProvider">
            <summary>
            Implements <see cref="T:Abp.Timing.IClockProvider"/> to work with local times.
            </summary>
        </member>
        <member name="T:Abp.Timing.UtcClockProvider">
            <summary>
            Implements <see cref="T:Abp.Timing.IClockProvider"/> to work with UTC times.
            </summary>
        </member>
        <member name="M:Abp.Transactions.Extensions.IsolationLevelExtensions.ToSystemDataIsolationLevel(System.Transactions.IsolationLevel)">
            <summary>
            Converts <see cref="T:System.Transactions.IsolationLevel"/> to <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
        </member>
        <member name="T:Abp.Utils.Etc.NullDisposable">
            <summary>
            This class is used to simulate a Disposable that does nothing.
            </summary>
        </member>
        <member name="T:Abp.Events.Bus.NullEventBus">
            <summary>
            An event bus that implements Null object pattern.
            </summary>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Register``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Register``1(Abp.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Register``2">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Register(System.Type,Abp.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Register``1(Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Register(System.Type,Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Unregister``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Unregister``1(Abp.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Unregister(System.Type,Abp.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Unregister``1(Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Unregister(System.Type,Abp.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.UnregisterAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.UnregisterAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Trigger``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Trigger``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Trigger(System.Type,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.Trigger(System.Type,System.Object,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.TriggerAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.TriggerAsync``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.TriggerAsync(System.Type,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Events.Bus.NullEventBus.TriggerAsync(System.Type,System.Object,Abp.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="P:Abp.Events.Bus.NullEventBus.Instance">
            <summary>
            Gets single instance of <see cref="T:Abp.Events.Bus.NullEventBus"/> class.
            </summary>
        </member>
        <member name="T:Abp.UI.UserFriendlyException">
            <summary>
            This exception type is directly shown to the user.
            TODO: Move to Abp namespace
            </summary>
        </member>
        <member name="M:Abp.UI.UserFriendlyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.UI.UserFriendlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="M:Abp.UI.UserFriendlyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Abp.UI.UserFriendlyException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="details">Additional information about the exception</param>
        </member>
        <member name="M:Abp.UI.UserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Abp.UI.UserFriendlyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="details">Additional information about the exception</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="P:Abp.UI.UserFriendlyException.Details">
            <summary>
            Additional information about the exception.
            </summary>
        </member>
        <member name="T:Abp.Localization.LocalizedString">
            <summary>
            Represents a localized string.
            </summary>
        </member>
        <member name="M:Abp.Localization.LocalizedString.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a localized string instance.
            </summary>
            <param name="cultureInfo">Culture info for this string</param>
            <param name="name">Unique Name of the string</param>
            <param name="value">Value for the <paramref name="name"/></param>
        </member>
        <member name="P:Abp.Localization.LocalizedString.CultureInfo">
            <summary>
            Culture info for this string.
            </summary>
        </member>
        <member name="P:Abp.Localization.LocalizedString.Name">
            <summary>
            Unique Name of the string.
            </summary>
        </member>
        <member name="P:Abp.Localization.LocalizedString.Value">
            <summary>
            Value for the <see cref="P:Abp.Localization.LocalizedString.Name"/>.
            </summary>
        </member>
        <member name="T:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource">
            <summary>
            This class is used to simplify to create a localization source that
            uses resource a file.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.#ctor(System.String,System.Resources.ResourceManager)">
            <param name="name">Unique Name of the source</param>
            <param name="resourceManager">Reference to the <see cref="P:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.ResourceManager"/> object related to this localization source</param>
        </member>
        <member name="M:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.Initialize(Abp.Configuration.Startup.ILocalizationConfiguration,Abp.Dependency.IIocResolver)">
            <summary>
            This method is called by ABP before first usage.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.GetString(System.String)">
            <summary>
            Gets localized string for given name in current language.
            </summary>
            <param name="name">Name</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets localized string for given name and specified culture.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.GetAllStrings">
            <summary>
            Gets all strings in current language.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.GetAllStrings(System.Globalization.CultureInfo)">
            <summary>
            Gets all strings in specified culture.
            </summary>
        </member>
        <member name="P:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.Name">
            <summary>
            Unique Name of the source.
            </summary>
        </member>
        <member name="P:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.ResourceManager">
            <summary>
            Reference to the <see cref="P:Abp.Localization.Sources.Resource.ResourceFileLocalizationSource.ResourceManager"/> object related to this localization source.
            </summary>
        </member>
        <member name="T:Abp.Localization.LocalizationHelper">
            <summary>
            This static class is used to simplify getting localized strings.
            </summary>
        </member>
        <member name="M:Abp.Localization.LocalizationHelper.GetSource(System.String)">
            <summary>
            Gets a pre-registered localization source.
            </summary>
        </member>
        <member name="M:Abp.Localization.LocalizationHelper.GetString(System.String,System.String)">
            <summary>
            Gets a localized string in current language.
            </summary>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.LocalizationHelper.GetString(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized string in specified language.
            </summary>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Abp.Localization.LocalizationManager.#ctor(Abp.Localization.ILanguageManager,Abp.Configuration.Startup.ILocalizationConfiguration,Abp.Dependency.IIocResolver)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Abp.Localization.LocalizationManager.GetSource(System.String)">
            <summary>
            Gets a localization source with name.
            </summary>
            <param name="name">Unique name of the localization source</param>
            <returns>The localization source</returns>
        </member>
        <member name="M:Abp.Localization.LocalizationManager.GetAllSources">
            <summary>
            Gets all registered localization sources.
            </summary>
            <returns>List of sources</returns>
        </member>
        <member name="P:Abp.Localization.LocalizationManager.CurrentLanguage">
            <summary>
            Gets current language for the application.
            </summary>
        </member>
        <member name="T:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource">
            <summary>
            This class is used to build a localization source
            which works on memory based dictionaries to find strings.
            </summary>
        </member>
        <member name="M:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.#ctor(System.String,Abp.Localization.Dictionaries.ILocalizationDictionaryProvider)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="dictionaryProvider"></param>
        </member>
        <member name="M:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.Initialize(Abp.Configuration.Startup.ILocalizationConfiguration,Abp.Dependency.IIocResolver)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetString(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetAllStrings">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetAllStrings(System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.Extend(Abp.Localization.Dictionaries.ILocalizationDictionary)">
            <summary>
            Extends the source with given dictionary.
            </summary>
            <param name="dictionary">Dictionary to extend the source</param>
        </member>
        <member name="P:Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource.Name">
            <summary>
            Unique Name of the source.
            </summary>
        </member>
        <member name="T:Abp.Localization.Sources.Xml.XmlLocalizationSource">
            <summary>
            XML based localization source.
            It uses XML files to read localized strings.
            </summary>
        </member>
        <member name="M:Abp.Localization.Sources.Xml.XmlLocalizationSource.#ctor(System.String,System.String)">
            <summary>
            Creates an Xml based localization source.
            </summary>
            <param name="name">Unique Name of the source</param>
            <param name="directoryPath">Directory path of the localization XML files</param>
        </member>
        <member name="T:Abp.Modules.AbpModuleManager">
            <summary>
            This class is used to manage modules.
            </summary>
        </member>
        <member name="T:Abp.Modules.AbpModuleInfo">
            <summary>
            Used to store all needed information for a module.
            </summary>
        </member>
        <member name="M:Abp.Modules.AbpModuleInfo.#ctor(Abp.Modules.AbpModule)">
            <summary>
            Creates a new AbpModuleInfo object.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:Abp.Modules.AbpModuleInfo.Assembly">
            <summary>
            The assembly which contains the module definition.
            </summary>
        </member>
        <member name="P:Abp.Modules.AbpModuleInfo.Type">
            <summary>
            Type of the module.
            </summary>
        </member>
        <member name="P:Abp.Modules.AbpModuleInfo.Instance">
            <summary>
            Instance of the module.
            </summary>
        </member>
        <member name="P:Abp.Modules.AbpModuleInfo.Dependencies">
            <summary>
            All dependent modules of this module.
            </summary>
        </member>
        <member name="T:Abp.AbpBootstrapper">
            <summary>
            This is the main class that is responsible to start entire ABP system.
            Prepares dependency injection and registers core components needed for startup.
            It must be instantiated and initialized (see <see cref="M:Abp.AbpBootstrapper.Initialize"/>) first in an application.
            </summary>
        </member>
        <member name="F:Abp.AbpBootstrapper.IsDisposed">
            <summary>
            Is this object disposed before?
            </summary>
        </member>
        <member name="M:Abp.AbpBootstrapper.#ctor">
            <summary>
            Creates a new <see cref="T:Abp.AbpBootstrapper"/> instance.
            </summary>
        </member>
        <member name="M:Abp.AbpBootstrapper.#ctor(Abp.Dependency.IIocManager)">
            <summary>
            Creates a new <see cref="T:Abp.AbpBootstrapper"/> instance.
            </summary>
            <param name="iocManager">IIocManager that is used to bootstrap the ABP system</param>
        </member>
        <member name="M:Abp.AbpBootstrapper.Initialize">
            <summary>
            Initializes the ABP system.
            </summary>
        </member>
        <member name="M:Abp.AbpBootstrapper.Dispose">
            <summary>
            Disposes the ABP system.
            </summary>
        </member>
        <member name="P:Abp.AbpBootstrapper.IocManager">
            <summary>
            Gets IIocManager object used by this class.
            </summary>
        </member>
        <member name="T:Abp.Modules.AbpModuleCollection">
            <summary>
            Used to store AbpModuleInfo objects as a dictionary.
            </summary>
        </member>
        <member name="M:Abp.Modules.AbpModuleCollection.GetModule``1">
            <summary>
            Gets a reference to a module instance.
            </summary>
            <typeparam name="TModule">Module type</typeparam>
            <returns>Reference to the module instance</returns>
        </member>
        <member name="M:Abp.Modules.AbpModuleCollection.GetSortedModuleListByDependency">
            <summary>
            Sorts modules according to dependencies.
            If module A depends on module B, A comes after B in the returned List.
            </summary>
            <returns>Sorted list</returns>
        </member>
        <member name="T:Abp.Collections.Extensions.CollectionExtensions">
            <summary>
            Extension methods for Collections.
            </summary>
        </member>
        <member name="M:Abp.Collections.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks whatever given collection object is null or has no item.
            </summary>
        </member>
        <member name="M:Abp.Collections.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if it's not already in the collection.
            </summary>
            <param name="source">Collection</param>
            <param name="item">Item to check and add</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns True if added, returns False if not.</returns>
        </member>
        <member name="T:Abp.Collections.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:Abp.Collections.Extensions.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            This method is used to try to get a value in a dictionary if it does exists.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="dictionary">The collection object</param>
            <param name="key">Key</param>
            <param name="value">Value of the key (or default value if key not exists)</param>
            <returns>True if key does exists in the dictionary</returns>
        </member>
        <member name="M:Abp.Collections.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="T:Abp.Extensions.ObjectExtensions">
            <summary>
            Extension methods for all objects.
            </summary>
        </member>
        <member name="M:Abp.Extensions.ObjectExtensions.As``1(System.Object)">
            <summary>
            Used to simplify and beautify casting an object to a type. 
            </summary>
            <typeparam name="T">Type to be casted</typeparam>
            <param name="obj">Object to cast</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:Abp.Extensions.ObjectExtensions.To``1(System.Object)">
            <summary>
            Converts given object to a value type using <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)"/> method.
            </summary>
            <param name="obj">Object to be converted</param>
            <typeparam name="T">Type of the target object</typeparam>
            <returns>Converted object</returns>
        </member>
        <member name="M:Abp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])">
            <summary>
            Check if an item is in a list.
            </summary>
            <param name="item">Item to check</param>
            <param name="list">List of items</param>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="T:Abp.Extensions.StringExtensions">
            <summary>
            Extension methods for String class.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.EnsureEndsWith(System.String,System.Char)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.EnsureEndsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.EnsureEndsWith(System.String,System.Char,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.EnsureStartsWith(System.String,System.Char)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.EnsureStartsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.EnsureStartsWith(System.String,System.Char,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether this string is null or an System.String.Empty string.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            indicates whether this string is null, empty, or consists only of white-space characters.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Converts line endings in the string to <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.NthIndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Gets index of nth occurence of a char in a string.
            </summary>
            <param name="str">source string to be searched</param>
            <param name="c">Char to search in <see cref="!:str"/></param>
            <param name="n">Count of the occurence</param>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from end of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.Split(System.String,System.String)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.SplitToLines(System.String)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.SplitToLines(System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts PascalCase string to camelCase string.
            </summary>
            <param name="str">String to convert</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.ToCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts PascalCase string to camelCase string in specified culture.
            </summary>
            <param name="str">String to convert</param>
            <param name="culture">An object that supplies culture-specific casing rules</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <param name="ignoreCase">Ignore case</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts camelCase string to PascalCase string.
            </summary>
            <param name="str">String to convert</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.ToPascalCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts camelCase string to PascalCase string in specified culture.
            </summary>
            <param name="str">String to convert</param>
            <param name="culture">An object that supplies culture-specific casing rules</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.TruncateWithPostfix(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds a "..." postfix to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:Abp.Extensions.StringExtensions.TruncateWithPostfix(System.String,System.Int32,System.String)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds given <paramref name="postfix"/> to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="T:Abp.Reflection.Extensions.MemberInfoExtensions">
            <summary>
            Extensions to <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:Abp.Reflection.Extensions.MemberInfoExtensions.GetSingleAttributeOrNull``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a single attribute for a member.
            </summary>
            <typeparam name="T">Type of the attribute</typeparam>
            <param name="memberInfo">The member that will be checked for the attribute</param>
            <param name="inherit">Include inherited attributes</param>
            <returns>Returns the attribute object if found. Returns null if not found.</returns>
        </member>
        <member name="T:Abp.Xml.Extensions.XmlNodeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Xml.XmlNode"/> class.
            </summary>
        </member>
        <member name="M:Abp.Xml.Extensions.XmlNodeExtensions.GetAttributeValueOrNull(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an attribute's value from an Xml node.
            </summary>
            <param name="node">The Xml node</param>
            <param name="attributeName">Attribute name</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="T:Abp.IO.DirectoryHelper">
            <summary>
            A helper class for Directory operations.
            </summary>
        </member>
        <member name="M:Abp.IO.DirectoryHelper.CreateIfNotExists(System.String)">
            <summary>
            Creates a new directory if it does not exists.
            </summary>
            <param name="directory">Directory to create</param>
        </member>
        <member name="T:Abp.IO.FileHelper">
            <summary>
            A helper class for File operations.
            </summary>
        </member>
        <member name="M:Abp.IO.FileHelper.DeleteIfExists(System.String)">
            <summary>
            Checks and deletes given file if it does exists.
            </summary>
            <param name="filePath">Path of the file</param>
        </member>
    </members>
</doc>
